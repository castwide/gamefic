/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/core_ext/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$kind_of?', '$delete_if', '$==', '$clone', '$send', '$include?', '$new', '$[]', '$rand', '$length', '$delete_at', '$sort', '$<=>', '$sort!', '$join', '$last', '$strip', '$join_and']);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    def.$that_are = function(cls) {
      var $a, $b, TMP_1, $c, TMP_2, self = this;

      if ((($a = (((($b = cls['$kind_of?']($scope.get('Class'))) !== false && $b !== nil) ? $b : cls['$kind_of?']($scope.get('Module'))))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.$clone()).$delete_if, $a.$$p = (TMP_1 = function(i){var self = TMP_1.$$s || this;
if (i == null) i = nil;
        return i['$kind_of?'](cls)['$=='](false)}, TMP_1.$$s = self, TMP_1), $a).call($b)
      } else if ((($a = cls['$kind_of?']($scope.get('Symbol'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self.$clone()).$delete_if, $a.$$p = (TMP_2 = function(i){var self = TMP_2.$$s || this;
if (i == null) i = nil;
        return i.$send(cls)['$=='](false)}, TMP_2.$$s = self, TMP_2), $a).call($c)
        } else {
        if ((($a = self['$include?'](cls)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return [cls]};
        return $scope.get('Array').$new();
      };
    };

    def.$that_are_not = function(cls) {
      var $a, $b, TMP_3, $c, TMP_4, self = this;

      if ((($a = (((($b = cls['$kind_of?']($scope.get('Class'))) !== false && $b !== nil) ? $b : cls['$kind_of?']($scope.get('Module'))))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.$clone()).$delete_if, $a.$$p = (TMP_3 = function(i){var self = TMP_3.$$s || this;
if (i == null) i = nil;
        return i['$kind_of?'](cls)['$=='](true)}, TMP_3.$$s = self, TMP_3), $a).call($b)
      } else if ((($a = cls['$kind_of?']($scope.get('Symbol'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self.$clone()).$delete_if, $a.$$p = (TMP_4 = function(i){var self = TMP_4.$$s || this;
if (i == null) i = nil;
        return i.$send(cls)['$=='](true)}, TMP_4.$$s = self, TMP_4), $a).call($c)
        } else {
        return $rb_minus(self.$clone(), [cls])
      };
    };

    def.$random = function() {
      var self = this;

      return self['$[]'](self.$rand(self.$length()));
    };

    def.$pop_random = function() {
      var self = this;

      return self.$delete_at(self.$rand(self.$length()));
    };

    def.$shuffle = function() {
      var $a, $b, TMP_5, self = this;

      return ($a = ($b = self).$sort, $a.$$p = (TMP_5 = function(a, b){var self = TMP_5.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return self.$rand(3)['$<=>'](self.$rand(3))}, TMP_5.$$s = self, TMP_5), $a).call($b);
    };

    def['$shuffle!'] = function() {
      var $a, $b, TMP_6, self = this;

      return ($a = ($b = self)['$sort!'], $a.$$p = (TMP_6 = function(a, b){var self = TMP_6.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return self.$rand(3)['$<=>'](self.$rand(3))}, TMP_6.$$s = self, TMP_6), $a).call($b);
    };

    def.$join_and = function(sep, andSep, serial) {
      var self = this, start = nil;

      if (sep == null) {
        sep = ", "
      }
      if (andSep == null) {
        andSep = " and "
      }
      if (serial == null) {
        serial = true
      }
      if ($rb_lt(self.$length(), 3)) {
        return self.$join(andSep)
        } else {
        start = $rb_minus(self, [self.$last()]);
        return $rb_plus(start.$join(sep), "" + ((function() {if (serial !== false && serial !== nil) {
          return sep.$strip()
          } else {
          return ""
        }; return nil; })()) + (andSep) + (self.$last()));
      };
    };

    return (def.$join_or = function(sep, orSep, serial) {
      var self = this;

      if (sep == null) {
        sep = ", "
      }
      if (orSep == null) {
        orSep = " or "
      }
      if (serial == null) {
        serial = true
      }
      return self.$join_and(sep, orSep, serial);
    }, nil) && 'join_or';
  })(self, null)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/core_ext/string"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$upcase', '$[]', '$length', '$capitalize_first', '$split', '$strip', '$gsub']);
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    def.$capitalize_first = function() {
      var self = this;

      return "" + (self['$[]'](0, 1).$upcase()) + (self['$[]'](1, self.$length()));
    };

    def.$cap_first = function() {
      var self = this;

      return self.$capitalize_first();
    };

    return (def.$split_words = function() {
      var self = this;

      return self.$gsub(/ +/, " ").$strip().$split();
    }, nil) && 'split_words';
  })(self, null)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/tense"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Tense');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'PRESENT', "present");

    Opal.cdecl($scope, 'PAST', "past");
  })((($scope.get('Gamefic')).$$scope.get('Grammar')));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/pronouns"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$[]', '$get_pronoun_set', '$cap_first', '$subj', '$obj', '$sets', '$person', '$nil?', '$plural?', '$gender', '$raise', '$[]=']);
  self.$require("gamefic");
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Pronouns(){};
      var self = $Pronouns = $klass($base, $super, 'Pronouns', $Pronouns);

      var def = self.$$proto, $scope = self.$$scope;

      def.object = nil;
      def.$initialize = function(object) {
        var self = this;

        return self.object = object;
      };

      def.$subj = function() {
        var self = this;

        return $scope.get('Pronouns').$get_pronoun_set(self.object)['$[]'](0);
      };

      def.$obj = function() {
        var self = this;

        return $scope.get('Pronouns').$get_pronoun_set(self.object)['$[]'](1);
      };

      def.$poss = function() {
        var self = this;

        return $scope.get('Pronouns').$get_pronoun_set(self.object)['$[]'](2);
      };

      def.$Subj = function() {
        var self = this;

        return self.$subj().$cap_first();
      };

      def.$Obj = function() {
        var self = this;

        return self.$obj().$cap_first();
      };

      def.$Poss = function() {
        var self = this;

        return self.$obj().$cap_first();
      };

      Opal.defs(self, '$get_pronoun_set', function(obj) {
        var $a, self = this, set = nil;

        set = $scope.get('Pronouns').$sets()['$[]']("" + (obj.$person()));
        if ((($a = set['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          set = $scope.get('Pronouns').$sets()['$[]']("" + (obj.$person()) + ":" + ((function() {if ((($a = obj['$plural?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "plural"
            } else {
            return "singular"
          }; return nil; })()))};
        if ((($a = set['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          set = $scope.get('Pronouns').$sets()['$[]']("" + (obj.$person()) + ":" + ((function() {if ((($a = obj['$plural?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "plural"
            } else {
            return "singular"
          }; return nil; })()) + ":" + (obj.$gender()))};
        if ((($a = set['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Pronoun set could not be determined")};
        return set;
      });

      return (Opal.defs(self, '$sets', function() {
        var $a, self = this;
        if (self.sets == null) self.sets = nil;

        if ((($a = self.sets['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.sets = $hash2([], {});
          self.sets['$[]=']("1:singular", ["I", "me", "my"]);
          self.sets['$[]=']("2", ["you", "you", "your"]);
          self.sets['$[]=']("3:singular:male", ["he", "him", "his"]);
          self.sets['$[]=']("3:singular:female", ["she", "her", "her"]);
          self.sets['$[]=']("3:singular:other", ["they", "them", "their"]);
          self.sets['$[]=']("3:singular:neutral", ["it", "it", "its"]);
          self.sets['$[]=']("1:plural", ["we", "us", "our"]);
          self.sets['$[]=']("3:plural", ["they", "them", "their"]);};
        return self.sets;
      }), nil) && 'sets';
    })(self, null)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/conjugator"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$[]', '$[]=', '$new']);
  self.$require("gamefic");
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Conjugator');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope;

        (Opal.cvars['@@conjugated_verbs'] = $hash2([], {}));

        Opal.defn(self, '$conjugate', function(infinitive, tense, forms) {
          var $a, $b, $c, self = this;

          forms = $slice.call(arguments, 2);
          ($a = infinitive, $b = (($c = Opal.cvars['@@conjugated_verbs']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $hash2([], {}))));
          return (($a = Opal.cvars['@@conjugated_verbs']) == null ? nil : $a)['$[]'](infinitive)['$[]='](tense, ($a = $scope.get('VerbSet')).$new.apply($a, [infinitive].concat(forms)));
        });

        Opal.defn(self, '$conjugated_verbs', function() {
          var $a, self = this;

          return (($a = Opal.cvars['@@conjugated_verbs']) == null ? nil : $a);
        });
      })(self)
    })(self)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/verbs"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extend', '$each_pair', '$define_singleton_method', '$conjugate', '$[]', '$conjugated_verbs', '$class', '$new', '$args']);
  self.$require("gamefic");
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Verbs(){};
      var self = $Verbs = $klass($base, $super, 'Verbs', $Verbs);

      var def = self.$$proto, $scope = self.$$scope, TMP_3;

      def.pronoun = nil;
      self.$extend((((((($scope.get('Gamefic')).$$scope.get('Grammar'))).$$scope.get('Conjugator'))).$$scope.get('ClassMethods')));

      def.$initialize = function(obj) {
        var $a, $b, TMP_1, self = this;

        self.pronoun = obj;
        return ($a = ($b = self.$class().$conjugated_verbs()).$each_pair, $a.$$p = (TMP_1 = function(infinitive, verbset){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (infinitive == null) infinitive = nil;if (verbset == null) verbset = nil;
        return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;
            if (self.pronoun == null) self.pronoun = nil;

          return verbset['$[]']("present").$conjugate(self.pronoun)}, TMP_2.$$s = self, TMP_2), $a).call($b, infinitive)}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };

      def.$method_missing = TMP_3 = function(infinitive, args) {
        var $a, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_3.$$p = null;
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Grammar'))).$$scope.get('VerbSet'))).$new.apply($a, [infinitive, nil].concat(args)).$conjugate(self.pronoun);
      };

      def['$[]'] = function(infinitive) {
        var $a, self = this;

        return ($a = (((($scope.get('Gamefic')).$$scope.get('Grammar'))).$$scope.get('VerbSet'))).$new.apply($a, [infinitive, nil].concat(self.$args())).$conjugate(self.pronoun);
      };

      self.$conjugate("be", "present", "am", "are", "is", "are");

      return self.$conjugate("have", "present", "have", "have", "has", "have");
    })(self, null)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/verb_set"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$to_s', '$[]', '$[]=', '$nil?', '$generate_third_singular', '$person', '$plural?', '$raise', '$private', '$end_with?']);
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $VerbSet(){};
      var self = $VerbSet = $klass($base, $super, 'VerbSet', $VerbSet);

      var def = self.$$proto, $scope = self.$$scope;

      def.forms = def.infinitive = nil;
      def.$initialize = function(infinitive, forms) {
        var $a, self = this, form = nil;

        forms = $slice.call(arguments, 1);
        self.infinitive = infinitive.$to_s();
        self.forms = $hash2([], {});
        form = forms['$[]'](0);
        self.forms['$[]=']("1:singular", (function() {if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.infinitive.$to_s()
          } else {
          return form.$to_s()
        }; return nil; })());
        form = forms['$[]'](1);
        self.forms['$[]=']("2:singular", (function() {if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.infinitive.$to_s()
          } else {
          return form.$to_s()
        }; return nil; })());
        form = forms['$[]'](2);
        self.forms['$[]=']("3:singular", (function() {if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$generate_third_singular()
          } else {
          return form.$to_s()
        }; return nil; })());
        form = forms['$[]'](3);
        self.forms['$[]=']("1:plural", (function() {if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.infinitive.$to_s()
          } else {
          return form.$to_s()
        }; return nil; })());
        form = forms['$[]'](4);
        self.forms['$[]=']("2:plural", (function() {if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.forms['$[]']("1:plural")
          } else {
          return form.$to_s()
        }; return nil; })());
        form = forms['$[]'](5);
        return self.forms['$[]=']("3:plural", (function() {if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.forms['$[]']("1:plural")
          } else {
          return form.$to_s()
        }; return nil; })());
      };

      def.$conjugate = function(pronoun) {
        var $a, self = this, form = nil;

        form = self.forms['$[]']("" + (pronoun.$person()));
        if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          form = self.forms['$[]']("" + (pronoun.$person()) + ":" + ((function() {if ((($a = pronoun['$plural?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "plural"
            } else {
            return "singular"
          }; return nil; })()))};
        if ((($a = form['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Unable to conjugate " + (self.infinitive))};
        return form;
      };

      self.$private();

      return (def.$generate_third_singular = function() {
        var $a, self = this;

        if ((($a = self.infinitive['$end_with?']("o")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $rb_plus(self.infinitive, "es")
        } else if ((($a = self.infinitive['$end_with?']("ry")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $rb_plus(self.infinitive['$[]']($range(0, -2, false)), "ies")
          } else {
          return $rb_plus(self.infinitive, "s")
        };
      }, nil) && 'generate_third_singular';
    })(self, null)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/person"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer']);
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Person');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("person");

      Opal.defn(self, '$person', function() {
        var $a, self = this;
        if (self.person == null) self.person = nil;

        return ((($a = self.person) !== false && $a !== nil) ? $a : self.person = 3);
      });
    })(self)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/plural"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer', '$nil?']);
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Plural');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("plural");

      Opal.defn(self, '$plural?', function() {
        var $a, self = this;
        if (self.plural == null) self.plural = nil;

        if ((($a = self.plural['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.plural = false};
        return self.plural;
      });
    })(self)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/gender"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer']);
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Gender');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("gender");

      Opal.defn(self, '$gender', function() {
        var $a, self = this;
        if (self.gender == null) self.gender = nil;

        return ((($a = self.gender) !== false && $a !== nil) ? $a : self.gender = "neutral");
      });
    })(self)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar/word_adapter"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$new', '$subj', '$pronoun', '$send', '$verb', '$[]']);
  self.$require("gamefic/grammar");
  self.$require("gamefic/grammar/gender");
  return (function($base) {
    var self = $module($base, 'Grammar');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'WordAdapter');

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Gender'));

      self.$include($scope.get('Person'));

      self.$include($scope.get('Plural'));

      Opal.defn(self, '$pronoun', function() {
        var $a, self = this;
        if (self.pronoun == null) self.pronoun = nil;

        return ((($a = self.pronoun) !== false && $a !== nil) ? $a : self.pronoun = (($scope.get('Grammar')).$$scope.get('Pronouns')).$new(self));
      });

      Opal.defn(self, '$verb', function() {
        var $a, self = this;
        if (self.verb == null) self.verb = nil;

        return ((($a = self.verb) !== false && $a !== nil) ? $a : self.verb = (($scope.get('Grammar')).$$scope.get('Verbs')).$new(self));
      });

      Opal.defn(self, '$contract', function(words) {
        var $a, self = this, src = nil;
        if (self.contractions == null) self.contractions = nil;

        ((($a = self.contractions) !== false && $a !== nil) ? $a : self.contractions = $hash2(["I am", "you are", "he is", "she is", "it is", "we are", "they are", "am not", "are not", "is not", "do not", "does not"], {"I am": "I'm", "you are": "you're", "he is": "he's", "she is": "she's", "it is": "it's", "we are": "we're", "they are": "they're", "am not": "am not", "are not": "aren't", "is not": "isn't", "do not": "don't", "does not": "doesn't"}));
        src = $rb_plus($rb_plus(self.$pronoun().$subj(), " "), self.$verb().$send(words));
        return ((($a = self.contractions['$[]'](src)) !== false && $a !== nil) ? $a : src);
      });
    })(self)
  })($scope.get('Gamefic'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/grammar"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$autoload']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Grammar');

      var def = self.$$proto, $scope = self.$$scope;

      self.$autoload("Tense", "gamefic/grammar/tense");

      self.$autoload("Pronouns", "gamefic/grammar/pronouns");

      self.$autoload("Conjugator", "gamefic/grammar/conjugator");

      self.$autoload("Verbs", "gamefic/grammar/verbs");

      self.$autoload("VerbSet", "gamefic/grammar/verb_set");

      self.$autoload("Person", "gamefic/grammar/person");

      self.$autoload("Plural", "gamefic/grammar/plural");

      self.$autoload("Gender", "gamefic/grammar/gender");

      self.$autoload("WordAdapter", "gamefic/grammar/word_adapter");
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/keywords"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$kind_of?', '$concat', '$join', '$split', '$downcase', '$strip', '$gsub', '$to_s', '$uniq!', '$each', '$include?', '$length', '$==', '$[]', '$to_f']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Keywords(){};
      var self = $Keywords = $klass($base, $super, 'Keywords', $Keywords);

      var def = self.$$proto, $scope = self.$$scope;

      def.$initialize = function(statement) {
        var $a, self = this;

        if (statement == null) {
          statement = ""
        }
        if ((($a = statement['$kind_of?']($scope.get('Keywords'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$concat(statement)
          } else {
          if ((($a = statement['$kind_of?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            statement = statement.$join(" ")};
          self.$concat(statement.$to_s().$gsub(/[^a-z0-9]/i, " ").$strip().$downcase().$split(" "));
        };
        return self['$uniq!']();
      };

      def.$found_in = function(other) {
        var $a, $b, TMP_1, self = this, matches = nil;

        matches = 0.0;
        ($a = ($b = self).$each, $a.$$p = (TMP_1 = function(my_word){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (my_word == null) my_word = nil;
        if ((($a = (other['$include?'](my_word))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return matches = $rb_plus(matches, 1.0)
            } else {
            return ($a = ($b = other).$each, $a.$$p = (TMP_2 = function(other_word){var self = TMP_2.$$s || this, $a, $b;
if (other_word == null) other_word = nil;
            if ($rb_lt(my_word.$length(), other_word.$length())) {
                if ((($a = (($b = other_word['$[]'](0, my_word.$length())['$=='](my_word)) ? $rb_gt(my_word.$length(), 2) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return matches = $rb_plus(matches, ($rb_divide(my_word.$length().$to_f(), other_word.$length().$to_f())))
                  } else {
                  return nil
                }
                } else {
                return nil
              }}, TMP_2.$$s = self, TMP_2), $a).call($b)
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return matches;
      };

      return (def.$to_s = function() {
        var self = this;

        return self.$join(" ");
      }, nil) && 'to_s';
    })(self, $scope.get('Array'))
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/serialized"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$keys', '$serializer', '$class', '$each', '$[]=', '$dup', '$from_superclass', '$private', '$respond_to?', '$superclass', '$send', '$extend']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Serialized');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$serialized_attributes', function() {
        var self = this;

        return self.$class().$serializer().$keys();
      });

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$serialize', function(args) {
          var $a, $b, TMP_1, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args).$each, $a.$$p = (TMP_1 = function(a){var self = TMP_1.$$s || this;
if (a == null) a = nil;
          return self.$serializer()['$[]='](a, nil)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$serializer', function() {
          var $a, $b, self = this;

          return ((($a = (($b = Opal.cvars['@@serialized_attributes']) == null ? nil : $b)) !== false && $a !== nil) ? $a : (Opal.cvars['@@serialized_attributes'] = self.$from_superclass("serializer", $hash2([], {})).$dup()));
        });

        self.$private();

        Opal.defn(self, '$from_superclass', function(m, default$) {
          var $a, self = this;

          if (default$ == null) {
            default$ = nil
          }
          if ((($a = self.$superclass()['$respond_to?'](m)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$superclass().$send(m)
            } else {
            return default$
          };
        });
      })(self);

      Opal.defs(self, '$included', function(base) {
        var self = this;

        return base.$extend((((($scope.get('Gamefic')).$$scope.get('Serialized'))).$$scope.get('ClassMethods')));
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/node"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$nil?', '$new', '$clone', '$each', '$recurse_flatten', '$children', '$==', '$raise', '$!', '$parent', '$parent=', '$include?', '$flatten', '$send', '$protected', '$push', '$delete', '$concat', '$private']);
  (function($base, $super) {
    function $CircularNodeReferenceError(){};
    var self = $CircularNodeReferenceError = $klass($base, $super, 'CircularNodeReferenceError', $CircularNodeReferenceError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Node');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$children', function() {
        var $a, self = this;
        if (self.children == null) self.children = nil;

        if ((($a = self.children['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.children = $scope.get('Array').$new()};
        return self.children.$clone();
      });

      Opal.defn(self, '$flatten', function() {
        var $a, $b, TMP_1, self = this, array = nil;

        array = $scope.get('Array').$new();
        ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(child){var self = TMP_1.$$s || this;
if (child == null) child = nil;
        return array = $rb_plus(array, self.$recurse_flatten(child))}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return array;
      });

      Opal.defn(self, '$parent', function() {
        var self = this;
        if (self.parent == null) self.parent = nil;

        return self.parent;
      });

      Opal.defn(self, '$parent=', function(node) {
        var $a, $b, self = this;
        if (self.parent == null) self.parent = nil;

        if (node['$=='](self.parent)) {
          return nil};
        if (node['$=='](self)) {
          self.$raise($scope.get('CircularNodeReferenceError').$new("Node cannot be its own parent"))};
        if ((($a = ($b = node['$=='](nil)['$!'](), $b !== false && $b !== nil ?node.$parent()['$=='](self) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [nil]), $b = node, $b['$parent='].apply($b, $a), $a[$a.length-1])};
        if ((($a = ($b = node['$=='](nil)['$!'](), $b !== false && $b !== nil ?self.$flatten()['$include?'](node) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('CircularNodeReferenceError').$new("Node cannot be a child of a descendant"))};
        if ((($a = self.parent['$=='](node)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.parent['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.parent.$send("rem_child", self)};
          self.parent = node;
          if ((($a = self.parent['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent.$send("add_child", self)
            } else {
            return nil
          };
          } else {
          return nil
        };
      });

      self.$protected();

      Opal.defn(self, '$add_child', function(node) {
        var self = this;
        if (self.children == null) self.children = nil;

        self.$children();
        return self.children.$push(node);
      });

      Opal.defn(self, '$rem_child', function(node) {
        var self = this;
        if (self.children == null) self.children = nil;

        self.$children();
        return self.children.$delete(node);
      });

      Opal.defn(self, '$concat_children', function(children) {
        var self = this;

        return children.$concat(children);
      });

      self.$private();

      Opal.defn(self, '$recurse_flatten', function(node) {
        var $a, $b, TMP_2, self = this, array = nil;

        array = $scope.get('Array').$new();
        array.$push(node);
        ($a = ($b = node.$children()).$each, $a.$$p = (TMP_2 = function(child){var self = TMP_2.$$s || this;
if (child == null) child = nil;
        return array = $rb_plus(array, self.$recurse_flatten(child))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return array;
      });
    })(self)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/describable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$attr_accessor', '$attr_writer', '$new', '$name', '$synonyms', '$proper_named?', '$==', '$indefinite_article', '$definite_article', '$!', '$split_words', '$include?', '$downcase', '$[]', '$strip', '$length', '$to_s', '$%', '$default_description', '$definitely', '$capitalize_first', '$indefinitely']);
  self.$require("gamefic/keywords");
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Describable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$include((($scope.get('Grammar')).$$scope.get('Person')), (($scope.get('Grammar')).$$scope.get('Plural')));

      self.$attr_reader("name");

      self.$attr_accessor("synonyms", "indefinite_article");

      self.$attr_writer("definite_article");

      Opal.defn(self, '$keywords', function() {
        var self = this;

        return $scope.get('Keywords').$new("" + (self.$name()) + " " + (self.$synonyms()));
      });

      Opal.defn(self, '$indefinitely', function() {
        var $a, $b, self = this;

        return $rb_plus(((function() {if ((($a = (((($b = self['$proper_named?']()) !== false && $b !== nil) ? $b : self.$indefinite_article()['$==']("")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return "" + (self.$indefinite_article()) + " "
        }; return nil; })()), self.$name());
      });

      Opal.defn(self, '$definitely', function() {
        var $a, $b, self = this;

        return $rb_plus(((function() {if ((($a = (((($b = self['$proper_named?']()) !== false && $b !== nil) ? $b : self.$definite_article()['$==']("")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return "" + (self.$definite_article()) + " "
        }; return nil; })()), self.$name());
      });

      Opal.defn(self, '$definite_article', function() {
        var $a, self = this;
        if (self.definite_article == null) self.definite_article = nil;

        return ((($a = self.definite_article) !== false && $a !== nil) ? $a : "the");
      });

      Opal.defn(self, '$proper_named?', function() {
        var self = this;
        if (self.proper_named == null) self.proper_named = nil;

        return (self.proper_named['$=='](true));
      });

      Opal.defn(self, '$proper_named=', function(value) {
        var $a, self = this;
        if (self.definite_article == null) self.definite_article = nil;
        if (self.name == null) self.name = nil;

        if (value['$=='](true)) {
          if ((($a = self.definite_article['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.name = "" + (self.definite_article) + " " + (self.name);
            self.definite_article = nil;}};
        return self.proper_named = value;
      });

      Opal.defn(self, '$name=', function(value) {
        var $a, self = this, words = nil;

        words = value.$split_words();
        if ((($a = ["a", "an"]['$include?'](words['$[]'](0).$downcase())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.indefinite_article = words['$[]'](0).$downcase();
          self.definite_article = "the";
          value = value['$[]']($range($rb_plus(words['$[]'](0).$length(), 1), -1, false)).$strip();
          } else {
          if (words['$[]'](0).$downcase()['$==']("the")) {
            if ((($a = self['$proper_named?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.definite_article = nil
              } else {
              self.definite_article = "the";
              value = value['$[]']($range(4, -1, false)).$strip();
            }};
          if ((($a = ["a", "e", "i", "o", "u"]['$include?'](value['$[]'](0, 1).$downcase())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.indefinite_article = "an"
            } else {
            self.indefinite_article = "a"
          };
        };
        return self.name = value;
      });

      Opal.defn(self, '$has_description?', function() {
        var self = this;
        if (self.description == null) self.description = nil;

        return (self.description.$to_s()['$==']("")['$!']());
      });

      Opal.defn(self, '$description', function() {
        var $a, self = this;
        if (self.description == null) self.description = nil;

        return ((($a = self.description) !== false && $a !== nil) ? $a : ($scope.get('Describable').$default_description()['$%']($hash2(["name", "Name"], {"name": self.$definitely(), "Name": self.$definitely().$capitalize_first()}))));
      });

      Opal.defn(self, '$description=', function(text) {
        var $a, self = this;

        if ((($a = text['$=='](($scope.get('Describable').$default_description()['$%']($hash2(["name", "Name"], {"name": self.$definitely(), "Name": self.$definitely().$capitalize_first()}))))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.description = text
          } else {
          return self.description = nil
        };
      });

      Opal.defs(self, '$default_description=', function(text) {
        var self = this;

        return self.default_description = text;
      });

      Opal.defs(self, '$default_description', function() {
        var $a, self = this;
        if (self.default_description == null) self.default_description = nil;

        return ((($a = self.default_description) !== false && $a !== nil) ? $a : "There's nothing special about %{name}.");
      });

      Opal.defn(self, '$to_s', function() {
        var self = this;

        return self.$indefinitely();
      });
    })(self)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/entity"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$extend', '$attr_reader', '$serialize', '$==', '$kind_of?', '$raise', '$pre_initialize', '$send', '$each', '$new', '$post_initialize', '$to_s', '$object_id', '$call', '$push', '$!', '$parent=', '$[]', '$session', '$[]=', '$execute', '$length', '$objects', '$definitely']);
  self.$require("gamefic/node");
  self.$require("gamefic/describable");
  self.$require("gamefic/serialized");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Entity(){};
      var self = $Entity = $klass($base, $super, 'Entity', $Entity);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4, TMP_5;

      def.plot = def.uid = def.update_procs = nil;
      self.$include($scope.get('Node'));

      self.$include($scope.get('Describable'));

      self.$include($scope.get('Serialized'));

      self.$extend((($scope.get('Serialized')).$$scope.get('ClassMethods')));

      self.$include((($scope.get('Grammar')).$$scope.get('WordAdapter')));

      self.$attr_reader("session", "plot");

      self.$serialize("name", "parent", "description");

      def.$initialize = TMP_2 = function(plot, args) {
        var $a, $b, TMP_1, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        if (args == null) {
          args = $hash2([], {})
        }
        TMP_2.$$p = null;
        if ((($a = (plot['$kind_of?']($scope.get('Plot'))['$=='](false))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("First argument must be a Plot")};
        self.$pre_initialize();
        self.plot = plot;
        self.plot.$send("add_entity", self);
        ($a = ($b = args).$each, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return self.$send("" + (key) + "=", value)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        self.update_procs = $scope.get('Array').$new();
        self.session = $scope.get('Hash').$new();
        if (($yield !== nil)) {
          if (Opal.yield1($yield, self) === $breaker) return $breaker.$v};
        return self.$post_initialize();
      };

      def.$uid = function() {
        var self = this;

        if (self.uid['$=='](nil)) {
          self.uid = self.$object_id().$to_s()};
        return self.uid;
      };

      def.$pre_initialize = function() {
        var self = this;

        return nil;
      };

      def.$post_initialize = function() {
        var self = this;

        return nil;
      };

      def.$tell = function(message) {
        var self = this;

        return nil;
      };

      def.$stream = function(message) {
        var self = this;

        return nil;
      };

      def.$update = function() {
        var $a, $b, TMP_3, self = this;

        return ($a = ($b = self.update_procs).$each, $a.$$p = (TMP_3 = function(p){var self = TMP_3.$$s || this;
if (p == null) p = nil;
        return p.$call(self)}, TMP_3.$$s = self, TMP_3), $a).call($b);
      };

      def.$on_update = TMP_4 = function() {
        var self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        return self.update_procs.$push(block);
      };

      def['$parent='] = TMP_5 = function(node) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

        TMP_5.$$p = null;
        if ((($a = ($b = node['$=='](nil)['$!'](), $b !== false && $b !== nil ?node['$kind_of?']($scope.get('Entity'))['$=='](false) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Entity's parent must be an Entity")};
        return Opal.find_super_dispatcher(self, 'parent=', TMP_5, $iter).apply(self, $zuper);
      };

      def.$destroy = function() {
        var $a, $b, self = this;

        (($a = [nil]), $b = self, $b['$parent='].apply($b, $a), $a[$a.length-1]);
        return self.plot.$send("rem_entity", self);
      };

      def['$[]'] = function(key) {
        var self = this;

        return self.$session()['$[]'](key);
      };

      def['$[]='] = function(key, value) {
        var self = this;

        return self.$session()['$[]='](key, value);
      };

      return (def.$find = function(description) {
        var $a, self = this, query = nil, results = nil;

        query = (($scope.get('Query')).$$scope.get('Children')).$new();
        results = query.$execute(self, description);
        if ((($a = results.$objects().$length()['$=='](1)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Find failed for " + (description) + " on " + (self.$definitely()))};
        return results.$objects()['$[]'](0);
      }, nil) && 'find';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/director/order"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Order(){};
      var self = $Order = $klass($base, $super, 'Order', $Order);

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_reader("actor", "action", "arguments");

      return (def.$initialize = function(actor, action, arguments$) {
        var self = this;

        self.actor = actor;
        self.action = action;
        return self["arguments"] = arguments$;
      }, nil) && 'initialize';
    })($scope.get('Director'), null)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/director/parser"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$shift', '$actions_with_verb', '$plot', '$to_sym', '$each', '$==', '$length', '$queries', '$validate', '$[]', '$push', '$new', '$unshift', '$to_s', '$match', '$syntaxes', '$verb', '$concat', '$bind_contexts_in_result', '$arguments', '$private', '$clone', '$execute_query', '$optional?', '$last', '$pop', '$nil?', '$kind_of?', '$execute', '$objects', '$remainder', '$raise', '$uniq!', '$times']);
  self.$require("gamefic/director/order");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Director');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var self = $module($base, 'Parser');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defs(self, '$from_tokens', function(actor, tokens) {
          var $a, $b, TMP_1, self = this, options = nil, command = nil, actions = nil;

          options = [];
          command = tokens.$shift();
          actions = actor.$plot().$actions_with_verb(command.$to_sym());
          ($a = ($b = actions).$each, $a.$$p = (TMP_1 = function(action){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, valid = nil, index = nil, arguments$ = nil;
if (action == null) action = nil;
          if (action.$queries().$length()['$=='](tokens.$length())) {
              valid = true;
              index = 0;
              ($a = ($b = action.$queries()).$each, $a.$$p = (TMP_2 = function(query){var self = TMP_2.$$s || this;
if (query == null) query = nil;
              if (query.$validate(actor, tokens['$[]'](index))['$=='](false)) {
                  valid = false;
                  return ($breaker.$v = nil, $breaker);};
                return index = $rb_plus(index, 1);}, TMP_2.$$s = self, TMP_2), $a).call($b);
              if (valid !== false && valid !== nil) {
                arguments$ = [];
                ($a = ($c = tokens).$each, $a.$$p = (TMP_3 = function(token){var self = TMP_3.$$s || this;
if (token == null) token = nil;
                return arguments$.$push([token])}, TMP_3.$$s = self, TMP_3), $a).call($c);
                return options.$push($scope.get('Order').$new(actor, action, arguments$));
                } else {
                return nil
              };
              } else {
              return nil
            }}, TMP_1.$$s = self, TMP_1), $a).call($b);
          if (options.$length()['$=='](0)) {
            tokens.$unshift(command)};
          return options;
        });

        Opal.defs(self, '$from_string', function(actor, command) {
          var $a, $b, TMP_4, self = this, options = nil, matches = nil;

          options = [];
          if (command.$to_s()['$==']("")) {
            return options};
          matches = $scope.get('Syntax').$match(command, actor.$plot().$syntaxes());
          ($a = ($b = matches).$each, $a.$$p = (TMP_4 = function(match){var self = TMP_4.$$s || this, $a, $b, TMP_5, actions = nil;
if (match == null) match = nil;
          actions = actor.$plot().$actions_with_verb(match.$verb());
            return ($a = ($b = actions).$each, $a.$$p = (TMP_5 = function(action){var self = TMP_5.$$s || this;
if (action == null) action = nil;
            return options.$concat(self.$bind_contexts_in_result(actor, match.$arguments(), action))}, TMP_5.$$s = self, TMP_5), $a).call($b);}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return options;
        });

        self.$private();

        Opal.defs(self, '$bind_contexts_in_result', function(actor, handler, action) {
          var $a, $b, $c, self = this, queries = nil, objects = nil, num_nil = nil;

          queries = action.$queries().$clone();
          objects = self.$execute_query(actor, handler.$clone(), queries, action);
          num_nil = 0;
          while ((($b = (($c = objects.$length()['$=='](0)) ? queries.$last()['$optional?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          num_nil = $rb_plus(num_nil, 1);
          queries.$pop();
          objects = self.$execute_query(actor, handler.$clone(), queries, action, num_nil);};
          return objects;
        });

        Opal.defs(self, '$execute_query', function(actor, arguments$, queries, action, num_nil) {
          var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, self = this, prepared = nil, objects = nil, valid = nil, last_remainder = nil;

          if (num_nil == null) {
            num_nil = 0
          }
          if ((($a = action.$verb()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            arguments$.$shift()
          };
          prepared = $scope.get('Array').$new();
          objects = $scope.get('Array').$new();
          valid = true;
          last_remainder = nil;
          ($a = ($b = queries.$clone()).$each, $a.$$p = (TMP_6 = function(context){var self = TMP_6.$$s || this, $a, $b, arg = nil, result = nil;
if (context == null) context = nil;
          arg = ((($a = arguments$.$shift()) !== false && $a !== nil) ? $a : last_remainder);
            if ((($a = ((($b = arg['$nil?']()) !== false && $b !== nil) ? $b : arg['$=='](""))) !== nil && (!$a.$$is_boolean || $a == true))) {
              valid = false;
              return nil;;};
            if (context['$==']($scope.get('String'))) {
              return prepared.$push([arg])
            } else if ((($a = context['$kind_of?']((($scope.get('Query')).$$scope.get('Base')))) !== nil && (!$a.$$is_boolean || $a == true))) {
              result = context.$execute(actor, arg);
              if (result.$objects().$length()['$=='](0)) {
                valid = false;
                return nil;;
                } else {
                prepared.$push(result.$objects());
                return last_remainder = result.$remainder();
              };
              } else {
              return self.$raise($scope.get('TypeError').$new("Action parameters must inherit from Query::Base"))
            };}, TMP_6.$$s = self, TMP_6), $a).call($b);
          if (valid['$=='](true)) {
            ($a = ($c = prepared).$each, $a.$$p = (TMP_7 = function(p){var self = TMP_7.$$s || this;
if (p == null) p = nil;
            return p['$uniq!']()}, TMP_7.$$s = self, TMP_7), $a).call($c);
            ($a = ($d = num_nil).$times, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return prepared.$push([nil])}, TMP_8.$$s = self, TMP_8), $a).call($d);
            objects.$push($scope.get('Order').$new(actor, action, prepared));};
          return objects;
        });
      })(self)
    })(self)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/director/delegate"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$each', '$push', '$definitely', '$tell', '$join_or', '$meta=', '$==', '$length', '$send', '$!', '$shift', '$nil?', '$allow_many?', '$[]', '$queries', '$action', '$kind_of?', '$validate', '$arguments', '$unshift', '$execute', '$pop', '$meta?', '$each_pair', '$test', '$verb', '$asserts', '$plot', '$proceed', '$private']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Director');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Delegate(){};
        var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, $d, base = nil;

        def.orders = def.actor = nil;
        base = (($scope.get('Query')).$$scope.get('Base')).$new();

        (Opal.cvars['@@disambiguator'] = ($a = ($b = $scope.get('Action')).$new, $a.$$p = (TMP_1 = function(actor, entities){var self = TMP_1.$$s || this, $a, $b, TMP_2, definites = nil;
if (actor == null) actor = nil;if (entities == null) entities = nil;
        definites = [];
          ($a = ($b = entities).$each, $a.$$p = (TMP_2 = function(entity){var self = TMP_2.$$s || this;
if (entity == null) entity = nil;
          return definites.$push(entity.$definitely())}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return actor.$tell("I don't know which you mean: " + (definites.$join_or()) + ".");}, TMP_1.$$s = self, TMP_1), $a).call($b, nil, nil, base));

        (($a = [true]), $c = (($d = Opal.cvars['@@disambiguator']) == null ? nil : $d), $c['$meta='].apply($c, $a), $a[$a.length-1]);

        def.$initialize = function(actor, orders) {
          var self = this;

          self.actor = actor;
          return self.orders = orders;
        };

        def.$proceed = function() {
          var $a, $b, $c, TMP_3, self = this, executed = nil, order = nil, arg_i = nil, final_arguments = nil;

          if (self.orders.$length()['$=='](0)) {
            return nil};
          self.actor.$send("delegate_stack").$push(self);
          executed = false;
          while ((($b = executed['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          order = self.orders.$shift();
          if ((($b = order['$nil?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            break;};
          arg_i = 0;
          final_arguments = [];
          ($b = ($c = order.$arguments()).$each, $b.$$p = (TMP_3 = function(argument){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c, $d, ambiguous = nil, valid = nil;
            if (self.actor == null) self.actor = nil;
if (argument == null) argument = nil;
          if ((($a = (($b = $rb_gt(argument.$length(), 1)) ? order.$action().$queries()['$[]'](arg_i)['$allow_many?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = argument['$[]'](0)['$kind_of?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
                final_arguments = nil;
                return ($breaker.$v = nil, $breaker);
                } else {
                ambiguous = argument
              };
              order = $scope.get('Order').$new(self.actor, (($a = Opal.cvars['@@disambiguator']) == null ? nil : $a), []);
              final_arguments = [ambiguous];
              return ($breaker.$v = nil, $breaker);};
            valid = [];
            ($a = ($b = argument).$each, $a.$$p = (TMP_4 = function(m){var self = TMP_4.$$s || this, $a, $b, $c, arg_array = nil;
              if (self.actor == null) self.actor = nil;
if (m == null) m = nil;
            if ((($a = order.$action().$queries()['$[]'](arg_i)['$allow_many?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = m['$kind_of?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
                  arg_array = [];
                  if ($rb_gt(m.$length(), 1)) {
                    order = $scope.get('Order').$new(self.actor, (($a = Opal.cvars['@@disambiguator']) == null ? nil : $a), []);
                    final_arguments = [m];
                    return ($breaker.$v = nil, $breaker);
                  } else if ((($a = order.$action().$queries()['$[]'](arg_i).$validate(self.actor, m['$[]'](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
                    arg_array.$push(m['$[]'](0))
                    } else {
                    final_arguments = nil;
                    return ($breaker.$v = nil, $breaker);
                  };
                  if ((($a = ((($b = order.$action()['$==']((($c = Opal.cvars['@@disambiguator']) == null ? nil : $c))) !== false && $b !== nil) ? $b : final_arguments['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
                    return ($breaker.$v = nil, $breaker)};
                  return valid.$push(arg_array);
                  } else {
                  final_arguments = nil;
                  return ($breaker.$v = nil, $breaker);
                }
              } else if ((($a = order.$action().$queries()['$[]'](arg_i).$validate(self.actor, m)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return valid.$push(m)
                } else {
                final_arguments = nil;
                return ($breaker.$v = nil, $breaker);
              }}, TMP_4.$$s = self, TMP_4), $a).call($b);
            if ((($a = ((($c = order.$action()['$==']((($d = Opal.cvars['@@disambiguator']) == null ? nil : $d))) !== false && $c !== nil) ? $c : final_arguments['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($breaker.$v = nil, $breaker)};
            if ((($a = order.$action().$queries()['$[]'](arg_i)['$allow_many?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              final_arguments.$push(valid)
            } else if (valid.$length()['$=='](1)) {
              final_arguments.$push(valid['$[]'](0))
              } else {
              final_arguments = nil;
              return ($breaker.$v = nil, $breaker);
            };
            return arg_i = $rb_plus(arg_i, 1);}, TMP_3.$$s = self, TMP_3), $b).call($c);
          if ((($b = final_arguments['$nil?']()['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            final_arguments.$unshift(self.actor);
            ($b = order.$action()).$execute.apply($b, [].concat(final_arguments));
            executed = true;};};
          return self.actor.$send("delegate_stack").$pop();
        };

        def.$execute = function() {try {

          var $a, $b, TMP_5, self = this;

          if (self.orders.$length()['$=='](0)) {
            return nil};
          if ((($a = self.orders['$[]'](0).$action()['$meta?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = self.actor.$plot().$asserts()).$each_pair, $a.$$p = (TMP_5 = function(name, rule){var self = TMP_5.$$s || this, result = nil;
              if (self.actor == null) self.actor = nil;
              if (self.orders == null) self.orders = nil;
if (name == null) name = nil;if (rule == null) rule = nil;
            result = rule.$test(self.actor, self.orders['$[]'](0).$action().$verb(), self.orders['$[]'](0).$arguments());
              if (result['$=='](false)) {
                Opal.ret(nil)
                } else {
                return nil
              };}, TMP_5.$$s = self, TMP_5), $a).call($b)};
          return self.$proceed();
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        };

        return self.$private();
      })(self, null)
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/director"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$autoload', '$length', '$from_tokens', '$==', '$from_string', '$strip', '$join', '$[]', '$new', '$execute']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Director');

      var def = self.$$proto, $scope = self.$$scope;

      self.$autoload("Parser", "gamefic/director/parser");

      self.$autoload("Delegate", "gamefic/director/delegate");

      self.$autoload("Order", "gamefic/director/order");

      Opal.defs(self, '$dispatch', function(actor, args) {
        var self = this, orders = nil, first_order = nil, del = nil;

        args = $slice.call(arguments, 1);
        orders = [];
        if ($rb_gt(args.$length(), 1)) {
          orders = $scope.get('Parser').$from_tokens(actor, args)};
        if (orders.$length()['$=='](0)) {
          orders = $scope.get('Parser').$from_string(actor, args.$join(" ").$strip())};
        first_order = orders['$[]'](0);
        del = $scope.get('Delegate').$new(actor, orders);
        del.$execute();
        return first_order;
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/character"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$new', '$dispatch', '$==', '$perform', '$!', '$user', '$to_s', '$gsub', '$send', '$stream', '$quit', '$nil?', '$last', '$delegate_stack', '$proceed', '$private', '$meta?', '$action', '$[]', '$arguments', '$kind_of?']);
  self.$require("gamefic/director");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Character(){};
      var self = $Character = $klass($base, $super, 'Character', $Character);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.buffer_stack = def.buffer = def.user = def.delegate_stack = nil;
      self.$attr_reader("queue", "user");

      self.$attr_reader("last_order");

      self.$attr_reader("last_object");

      self.$attr_accessor("object_of_pronoun", "scene");

      def.$initialize = TMP_1 = function(plot, args) {var $zuper = $slice.call(arguments, 0);
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (args == null) {
          args = $hash2([], {})
        }
        TMP_1.$$p = null;
        self.queue = $scope.get('Array').$new();
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
        self.buffer_stack = 0;
        return self.buffer = "";
      };

      def.$connect = function(user) {
        var self = this;

        return self.user = user;
      };

      def.$disconnect = function() {
        var self = this;

        return self.user = nil;
      };

      def.$perform = function(command) {
        var $a, self = this;

        command = $slice.call(arguments, 0);
        return ($a = $scope.get('Director')).$dispatch.apply($a, [self].concat(command));
      };

      def.$quietly = function(command) {
        var $a, self = this;

        command = $slice.call(arguments, 0);
        if (self.buffer_stack['$=='](0)) {
          self.buffer = ""};
        self.buffer_stack = $rb_plus(self.buffer_stack, 1);
        ($a = self).$perform.apply($a, [].concat(command));
        self.buffer_stack = $rb_minus(self.buffer_stack, 1);
        return self.buffer;
      };

      def.$tell = function(message) {
        var $a, $b, self = this;

        if ((($a = ($b = self.$user()['$=='](nil)['$!'](), $b !== false && $b !== nil ?message.$to_s()['$==']("")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ($rb_gt(self.buffer_stack, 0)) {
            return self.buffer = $rb_plus(self.buffer, message)
            } else {
            message = "<p>" + (message) + "</p>";
            message = message.$gsub(/\n\n/, "</p><p>");
            message = message.$gsub(/\n/, "<br/>");
            return self.$user().$stream().$send(message);
          }
          } else {
          return nil
        };
      };

      def.$stream = function(message) {
        var self = this;

        return self.$user().$stream().$send(message);
      };

      def.$destroy = TMP_2 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        TMP_2.$$p = null;
        if ((($a = self.user['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.user.$quit()};
        return Opal.find_super_dispatcher(self, 'destroy', TMP_2, $iter).apply(self, $zuper);
      };

      def.$proceed = function() {
        var $a, self = this;

        if ((($a = self.$delegate_stack().$last()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$delegate_stack().$last().$proceed();
      };

      def.$on_turn = function() {
        var self = this;

        return nil;
      };

      self.$private();

      def.$delegate_stack = function() {
        var $a, self = this;

        return ((($a = self.delegate_stack) !== false && $a !== nil) ? $a : self.delegate_stack = []);
      };

      return (def['$last_order='] = function(order) {
        var $a, $b, $c, $d, self = this;

        if ((($a = order['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.last_order = order;
        if ((($a = ($b = ($c = ($d = order.$action()['$meta?']()['$!'](), $d !== false && $d !== nil ?order.$arguments()['$[]'](0)['$nil?']()['$!']() : $d), $c !== false && $c !== nil ?order.$arguments()['$[]'](0)['$[]'](0)['$nil?']()['$!']() : $c), $b !== false && $b !== nil ?order.$arguments()['$[]'](0)['$[]'](0)['$kind_of?']($scope.get('Entity')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.last_object = order.$arguments()['$[]'](0)['$[]'](0)
          } else {
          return nil
        };
      }, nil) && 'last_order=';
    })(self, $scope.get('Entity'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/scene"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$attr_writer', '$new', '$scene_class', '$attr_reader', '$instance_variable_get', '$state', '$data_class', '$prompt=', '$prompt', '$nil?', '$input=', '$call', '$next_cue', '$next_cue=']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $SceneManager(){};
      var self = $SceneManager = $klass($base, $super, 'SceneManager', $SceneManager);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.state = def.prompt = nil;
      self.$attr_accessor("state");

      self.$attr_writer("prompt");

      def.$initialize = TMP_1 = function() {
        var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        if ((block !== nil)) {
          return $a = Opal.yield1(block, self), $a === $breaker ? $a : $a
          } else {
          return nil
        };
      };

      def.$data_class = function() {
        var self = this;

        return $scope.get('SceneData');
      };

      def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = "Passive");
      };

      def.$scene_class = function() {
        var self = this;

        return $scope.get('Scene');
      };

      def.$start = TMP_2 = function() {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return self.start = block;
      };

      def.$finish = TMP_3 = function() {
        var self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        return self.finish = block;
      };

      def.$prepare = function(key) {
        var self = this;

        return self.$scene_class().$new(self, key);
      };

      return (def.$prompt = function() {
        var $a, self = this;

        return ((($a = self.prompt) !== false && $a !== nil) ? $a : self.prompt = ">");
      }, nil) && 'prompt';
    })(self, null);

    (function($base, $super) {
      function $SceneData(){};
      var self = $SceneData = $klass($base, $super, 'SceneData', $SceneData);

      var def = self.$$proto, $scope = self.$$scope;

      return self.$attr_accessor("input", "prompt", "next_cue")
    })(self, null);

    (function($base, $super) {
      function $Scene(){};
      var self = $Scene = $klass($base, $super, 'Scene', $Scene);

      var def = self.$$proto, $scope = self.$$scope;

      def.data = def.start = def.finish = nil;
      self.$attr_reader("data", "state", "key");

      def.$initialize = function(manager, key) {
        var $a, $b, self = this;

        self.manager = manager;
        self.start = manager.$instance_variable_get("@start");
        self.finish = manager.$instance_variable_get("@finish");
        self.state = manager.$state();
        self.data = manager.$data_class().$new();
        (($a = [manager.$prompt()]), $b = self.data, $b['$prompt='].apply($b, $a), $a[$a.length-1]);
        return self.key = key;
      };

      def.$start = function(actor) {
        var $a, $b, self = this;

        if ((($a = self.start['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        (($a = [nil]), $b = self.data, $b['$input='].apply($b, $a), $a[$a.length-1]);
        return self.start.$call(actor, self.data);
      };

      return (def.$finish = function(actor, input) {
        var $a, $b, self = this;

        ($a = self.data, ((($b = $a.$next_cue()) !== false && $b !== nil) ? $b : $a['$next_cue=']("active")));
        if ((($a = self.finish['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        (($a = [input]), $b = self.data, $b['$input='].apply($b, $a), $a[$a.length-1]);
        return self.finish.$call(actor, self.data);
      }, nil) && 'finish';
    })(self, null);
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/scene/active"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$input=', '$nil?', '$perform', '$input', '$data', '$send', '$call']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ActiveSceneManager(){};
      var self = $ActiveSceneManager = $klass($base, $super, 'ActiveSceneManager', $ActiveSceneManager);

      var def = self.$$proto, $scope = self.$$scope;

      def.state = nil;
      def.$scene_class = function() {
        var self = this;

        return $scope.get('ActiveScene');
      };

      return (def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = "Active");
      }, nil) && 'state';
    })(self, $scope.get('SceneManager'));

    (function($base, $super) {
      function $ActiveScene(){};
      var self = $ActiveScene = $klass($base, $super, 'ActiveScene', $ActiveScene);

      var def = self.$$proto, $scope = self.$$scope;

      def.data = def.finish = nil;
      return (def.$finish = function(actor, input) {
        var $a, $b, self = this, last_order = nil;

        (($a = [input]), $b = self.data, $b['$input='].apply($b, $a), $a[$a.length-1]);
        if ((($a = self.finish['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          last_order = actor.$perform(self.$data().$input());
          return actor.$send("last_order=", last_order);
          } else {
          return self.finish.$call(actor, self.$data())
        };
      }, nil) && 'finish'
    })(self, $scope.get('Scene'));
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/scene/concluded"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ConcludedSceneManager(){};
      var self = $ConcludedSceneManager = $klass($base, $super, 'ConcludedSceneManager', $ConcludedSceneManager);

      var def = self.$$proto, $scope = self.$$scope;

      def.state = def.prompt = nil;
      def.$scene_class = function() {
        var self = this;

        return $scope.get('ConcludedScene');
      };

      def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = "Concluded");
      };

      return (def.$prompt = function() {
        var $a, self = this;

        return ((($a = self.prompt) !== false && $a !== nil) ? $a : self.prompt = "GAME OVER");
      }, nil) && 'prompt';
    })(self, $scope.get('SceneManager'));

    (function($base, $super) {
      function $ConcludedScene(){};
      var self = $ConcludedScene = $klass($base, $super, 'ConcludedScene', $ConcludedScene);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('Scene'));
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/scene/paused"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $PausedSceneManager(){};
      var self = $PausedSceneManager = $klass($base, $super, 'PausedSceneManager', $PausedSceneManager);

      var def = self.$$proto, $scope = self.$$scope;

      def.state = def.prompt = nil;
      def.$scene_class = function() {
        var self = this;

        return $scope.get('PausedScene');
      };

      def.$data_class = function() {
        var self = this;

        return $scope.get('PausedSceneData');
      };

      def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = "Paused");
      };

      return (def.$prompt = function() {
        var $a, self = this;

        return ((($a = self.prompt) !== false && $a !== nil) ? $a : self.prompt = "Press enter to continue...");
      }, nil) && 'prompt';
    })(self, $scope.get('SceneManager'));

    (function($base, $super) {
      function $PausedSceneData(){};
      var self = $PausedSceneData = $klass($base, $super, 'PausedSceneData', $PausedSceneData);

      var def = self.$$proto, $scope = self.$$scope;

      return self.$attr_accessor("next_cue")
    })(self, $scope.get('SceneData'));

    (function($base, $super) {
      function $PausedScene(){};
      var self = $PausedScene = $klass($base, $super, 'PausedScene', $PausedScene);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })(self, $scope.get('Scene'));
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/scene/multiplechoice"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$each', '$push', '$options', '$prompt=', '$join', '$input=', '$index=', '$selection=', '$to_i', '$nil?', '$[]', '$tell', '$call', '$data']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $MultipleChoiceSceneManager(){};
      var self = $MultipleChoiceSceneManager = $klass($base, $super, 'MultipleChoiceSceneManager', $MultipleChoiceSceneManager);

      var def = self.$$proto, $scope = self.$$scope;

      def.state = nil;
      def.$data_class = function() {
        var self = this;

        return $scope.get('MultipleChoiceSceneData');
      };

      def.$scene_class = function() {
        var self = this;

        return $scope.get('MultipleChoiceScene');
      };

      return (def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = "MultipleChoice");
      }, nil) && 'state';
    })(self, $scope.get('SceneManager'));

    (function($base, $super) {
      function $MultipleChoiceSceneData(){};
      var self = $MultipleChoiceSceneData = $klass($base, $super, 'MultipleChoiceSceneData', $MultipleChoiceSceneData);

      var def = self.$$proto, $scope = self.$$scope;

      def.options = nil;
      self.$attr_accessor("index", "selection", "options");

      return (def.$options = function() {
        var $a, self = this;

        return ((($a = self.options) !== false && $a !== nil) ? $a : self.options = []);
      }, nil) && 'options';
    })(self, $scope.get('SceneData'));

    (function($base, $super) {
      function $MultipleChoiceScene(){};
      var self = $MultipleChoiceScene = $klass($base, $super, 'MultipleChoiceScene', $MultipleChoiceScene);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.prompt = def.data = def.end_prompt = def.finish = nil;
      def.$initialize = TMP_1 = function(manager, key) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
        return self.end_prompt = ((($a = self.prompt) !== false && $a !== nil) ? $a : "Enter a choice:");
      };

      def.$start = TMP_2 = function(actor) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, TMP_3, $c, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, list = nil, index = nil;

        TMP_2.$$p = null;
        Opal.find_super_dispatcher(self, 'start', TMP_2, $iter).apply(self, $zuper);
        list = [];
        index = 1;
        ($a = ($b = self.data.$options()).$each, $a.$$p = (TMP_3 = function(o){var self = TMP_3.$$s || this;
if (o == null) o = nil;
        list.$push("" + (index) + ". " + (o));
          return index = $rb_plus(index, 1);}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return (($a = ["" + (list.$join("\n")) + "\n" + (self.end_prompt)]), $c = self.data, $c['$prompt='].apply($c, $a), $a[$a.length-1]);
      };

      return (def.$finish = function(actor, input) {
        var $a, $b, self = this, index = nil;

        (($a = [input]), $b = self.data, $b['$input='].apply($b, $a), $a[$a.length-1]);
        (($a = [nil]), $b = self.data, $b['$index='].apply($b, $a), $a[$a.length-1]);
        (($a = [nil]), $b = self.data, $b['$selection='].apply($b, $a), $a[$a.length-1]);
        index = input.$to_i();
        if ((($a = self.data.$options()['$[]']($rb_minus(index, 1))['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$tell("That's not a valid selection.")
          } else {
          if ((($a = self.finish['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          (($a = [$rb_minus(index, 1)]), $b = self.data, $b['$index='].apply($b, $a), $a[$a.length-1]);
          (($a = [self.data.$options()['$[]']($rb_minus(index, 1))]), $b = self.data, $b['$selection='].apply($b, $a), $a[$a.length-1]);
          return self.finish.$call(actor, self.$data());
        };
      }, nil) && 'finish';
    })(self, $scope.get('Scene'));
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/scene/yesorno"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$input=', '$answer=', '$==', '$[]', '$downcase', '$nil?', '$answer', '$tell', '$call', '$data']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $YesOrNoSceneManager(){};
      var self = $YesOrNoSceneManager = $klass($base, $super, 'YesOrNoSceneManager', $YesOrNoSceneManager);

      var def = self.$$proto, $scope = self.$$scope;

      def.state = def.prompt = nil;
      def.$scene_class = function() {
        var self = this;

        return $scope.get('YesOrNoScene');
      };

      def.$data_class = function() {
        var self = this;

        return $scope.get('YesOrNoSceneData');
      };

      def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = "YesOrNo");
      };

      return (def.$prompt = function() {
        var $a, self = this;

        return ((($a = self.prompt) !== false && $a !== nil) ? $a : self.prompt = "Enter Yes Or No:");
      }, nil) && 'prompt';
    })(self, $scope.get('SceneManager'));

    (function($base, $super) {
      function $YesOrNoSceneData(){};
      var self = $YesOrNoSceneData = $klass($base, $super, 'YesOrNoSceneData', $YesOrNoSceneData);

      var def = self.$$proto, $scope = self.$$scope;

      return self.$attr_accessor("answer")
    })(self, $scope.get('SceneData'));

    (function($base, $super) {
      function $YesOrNoScene(){};
      var self = $YesOrNoScene = $klass($base, $super, 'YesOrNoScene', $YesOrNoScene);

      var def = self.$$proto, $scope = self.$$scope;

      def.data = def.finish = nil;
      return (def.$finish = function(actor, input) {
        var $a, $b, self = this;

        (($a = [input]), $b = self.data, $b['$input='].apply($b, $a), $a[$a.length-1]);
        (($a = [nil]), $b = self.data, $b['$answer='].apply($b, $a), $a[$a.length-1]);
        if (input.$downcase()['$[]'](0, 1)['$==']("y")) {
          (($a = ["yes"]), $b = self.data, $b['$answer='].apply($b, $a), $a[$a.length-1])
        } else if (input.$downcase()['$[]'](0, 1)['$==']("n")) {
          (($a = ["no"]), $b = self.data, $b['$answer='].apply($b, $a), $a[$a.length-1])};
        if ((($a = self.data.$answer()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$tell("Please enter Yes or No.")
          } else {
          if ((($a = self.finish['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return self.finish.$call(actor, self.$data());
        };
      }, nil) && 'finish'
    })(self, $scope.get('Scene'));
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_accessor', '$test_arguments', '$include?', '$delete', '$new', '$[]', '$context_from', '$each', '$that_are', '$allow_many?', '$!', '$downcase', '$match', '$objects', '$matching_text', '$remainder', '$==', '$length', '$respond_to?', '$nil?', '$last_object', '$validate', '$[]=', '$base_specificity', '$kind_of?', '$class', '$superclass', '$join', '$raise', '$instance_methods']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope;

      def.match_hash = def.optional = def["arguments"] = def.specificity = nil;
      self.$include($scope.get('Gamefic'));

      (Opal.cvars['@@last_new'] = nil);

      self.$attr_accessor("arguments");

      Opal.defs(self, '$last_new', function() {
        var $a, self = this;

        return (($a = Opal.cvars['@@last_new']) == null ? nil : $a);
      });

      def.$initialize = function(arguments$) {
        var $a, self = this;

        arguments$ = $slice.call(arguments, 0);
        self.$test_arguments(arguments$);
        self.optional = false;
        if ((($a = arguments$['$include?']("optional")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.optional = true;
          arguments$.$delete("optional");};
        self["arguments"] = arguments$;
        (Opal.cvars['@@last_new'] = self);
        return self.match_hash = $scope.get('Hash').$new();
      };

      def['$allow_many?'] = function() {
        var self = this;

        return false;
      };

      def.$last_match_for = function(subject) {
        var self = this;

        return self.match_hash['$[]'](subject);
      };

      def['$optional?'] = function() {
        var self = this;

        return self.optional;
      };

      def.$context_from = function(subject) {
        var self = this;

        return subject;
      };

      def.$validate = function(subject, object) {
        var $a, $b, TMP_1, self = this, arr = nil;

        arr = self.$context_from(subject);
        ($a = ($b = self["arguments"]).$each, $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
        return arr = arr.$that_are(arg)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return arr['$include?'](object);
      };

      def.$execute = function(subject, description) {
        var $a, $b, $c, self = this, array = nil, matches = nil, objects = nil, obj = nil;

        if ((($a = ($b = ($c = self['$allow_many?'](), $c !== false && $c !== nil ?description['$include?'](",")['$!']() : $c), $b !== false && $b !== nil ?description.$downcase()['$include?'](" and ")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Matches').$new([], "", description)};
        array = self.$context_from(subject);
        matches = $scope.get('Query').$match(description, array);
        objects = matches.$objects();
        matches = $scope.get('Matches').$new(objects, matches.$matching_text(), matches.$remainder());
        if ((($a = ($b = (($c = objects.$length()['$=='](0)) ? matches.$remainder()['$==']("it") : $c), $b !== false && $b !== nil ?subject['$respond_to?']("last_object") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = subject.$last_object()['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            obj = subject.$last_object();
            if ((($a = self.$validate(subject, obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
              matches = $scope.get('Matches').$new([obj], "it", "")};}};
        self.match_hash['$[]='](subject, matches);
        return matches;
      };

      def.$base_specificity = function() {
        var self = this;

        return 0;
      };

      def.$specificity = function() {
        var $a, $b, TMP_2, self = this, magnitude = nil;

        if (self.specificity['$=='](nil)) {
          self.specificity = self.$base_specificity();
          magnitude = 1;
          ($a = ($b = self["arguments"]).$each, $a.$$p = (TMP_2 = function(item){var self = TMP_2.$$s || this, $a, $b, s = nil;
            if (self.specificity == null) self.specificity = nil;
if (item == null) item = nil;
          if ((($a = item['$kind_of?']($scope.get('Entity'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.specificity = $rb_plus(self.specificity, ($rb_times(magnitude, 10)));
              item = item.$class();};
            if ((($a = item['$kind_of?']($scope.get('Class'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              s = item;
              while ((($b = s['$=='](nil)['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.specificity = $rb_plus(self.specificity, magnitude);
              s = s.$superclass();};
              } else {
              return self.specificity = $rb_plus(self.specificity, magnitude)
            };}, TMP_2.$$s = self, TMP_2), $a).call($b);
          if ((($a = self['$allow_many?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.specificity = $rb_times(self.specificity, 100000)};};
        return self.specificity;
      };

      def.$signature = function() {
        var self = this;

        return "" + (self.$class()) + "(" + (self["arguments"].$join(",")) + ")";
      };

      return (def.$test_arguments = function(arguments$) {
        var $a, $b, TMP_3, self = this, cur_class = nil, cur_object = nil;

        cur_class = (($scope.get('Gamefic')).$$scope.get('Entity'));
        cur_object = nil;
        return ($a = ($b = arguments$).$each, $a.$$p = (TMP_3 = function(a){var self = TMP_3.$$s || this, $a, $b;
if (a == null) a = nil;
        if ((($a = ((($b = a['$kind_of?']($scope.get('Class'))) !== false && $b !== nil) ? $b : a['$kind_of?']($scope.get('Module')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return cur_class = a
          } else if ((($a = a['$kind_of?'](cur_class)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return cur_object = a
          } else if ((($a = a['$kind_of?']($scope.get('Symbol'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = cur_object['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = cur_object['$respond_to?'](a)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.$raise($scope.get('ArgumentError').$new("Query signature target does not respond to " + (a)))
                } else {
                return nil
              }
            } else if ((($a = cur_class.$instance_methods()['$include?'](a)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$raise($scope.get('ArgumentError').$new("Query signature target methods do not include " + (a)))
              } else {
              return nil
            }
            } else {
            return self.$raise($scope.get('ArgumentError').$new("What the heck is this?"))
          }}, TMP_3.$$s = self, TMP_3), $a).call($b);
      }, nil) && 'test_arguments';
    })(self, null)
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/text"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$kind_of?', '$split_words', '$each', '$include?', '$==', '$length', '$new', '$push', '$join']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Text(){};
      var self = $Text = $klass($base, $super, 'Text', $Text);

      var def = self.$$proto, $scope = self.$$scope;

      def["arguments"] = nil;
      def.$base_specificity = function() {
        var self = this;

        return 10;
      };

      def.$validate = function(subject, description) {
        var $a, $b, TMP_1, self = this, valid = nil, words = nil;

        if ((($a = description['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        valid = false;
        words = description.$split_words();
        ($a = ($b = words).$each, $a.$$p = (TMP_1 = function(word){var self = TMP_1.$$s || this, $a;
if (word == null) word = nil;
        if ((($a = description['$include?'](word)) !== nil && (!$a.$$is_boolean || $a == true))) {
            valid = true;
            return ($breaker.$v = nil, $breaker);
            } else {
            return nil
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return valid;
      };

      def.$execute = function(subject, description) {
        var $a, $b, TMP_2, self = this, keywords = nil, args = nil, found = nil, remainder = nil;

        if (self["arguments"].$length()['$=='](0)) {
          return $scope.get('Matches').$new([description], description, "")};
        keywords = $scope.get('Keywords').$new(description);
        args = $scope.get('Keywords').$new(self["arguments"]);
        found = $scope.get('Array').$new();
        remainder = $scope.get('Array').$new();
        ($a = ($b = keywords).$each, $a.$$p = (TMP_2 = function(key){var self = TMP_2.$$s || this, $a;
if (key == null) key = nil;
        if ((($a = args['$include?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return found.$push(key)
            } else {
            return remainder.$push(key)
          }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        if ($rb_gt(found.$length(), 0)) {
          return $scope.get('Matches').$new([description], found.$join(" "), remainder.$join(" "))
          } else {
          return $scope.get('Matches').$new([], "", description)
        };
      };

      return (def.$test_arguments = function(arguments$) {
        var self = this;

        return nil;
      }, nil) && 'test_arguments';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/self"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Self(){};
      var self = $Self = $klass($base, $super, 'Self', $Self);

      var def = self.$$proto, $scope = self.$$scope;

      def.$base_specificity = function() {
        var self = this;

        return 30;
      };

      return (def.$context_from = function(subject) {
        var self = this;

        return [subject];
      }, nil) && 'context_from';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/parent"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$parent']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parent(){};
      var self = $Parent = $klass($base, $super, 'Parent', $Parent);

      var def = self.$$proto, $scope = self.$$scope;

      def.$base_specificity = function() {
        var self = this;

        return 30;
      };

      return (def.$context_from = function(subject) {
        var self = this;

        return [subject.$parent()];
      }, nil) && 'context_from';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/children"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$children']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Children(){};
      var self = $Children = $klass($base, $super, 'Children', $Children);

      var def = self.$$proto, $scope = self.$$scope;

      def.$base_specificity = function() {
        var self = this;

        return 50;
      };

      return (def.$context_from = function(subject) {
        var self = this;

        return subject.$children();
      }, nil) && 'context_from';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/many_children"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("gamefic/query/children");
  return (function($base, $super) {
    function $ManyChildren(){};
    var self = $ManyChildren = $klass($base, $super, 'ManyChildren', $ManyChildren);

    var def = self.$$proto, $scope = self.$$scope;

    return (def['$allow_many?'] = function() {
      var self = this;

      return true;
    }, nil) && 'allow_many?'
  })((($scope.get('Gamefic')).$$scope.get('Query')), (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Children')));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/siblings"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$children', '$parent']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Siblings(){};
      var self = $Siblings = $klass($base, $super, 'Siblings', $Siblings);

      var def = self.$$proto, $scope = self.$$scope;

      def.$base_specificity = function() {
        var self = this;

        return 40;
      };

      return (def.$context_from = function(subject) {
        var self = this;

        return ($rb_minus(subject.$parent().$children(), [subject]));
      }, nil) && 'context_from';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/family"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$children', '$parent']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Family(){};
      var self = $Family = $klass($base, $super, 'Family', $Family);

      var def = self.$$proto, $scope = self.$$scope;

      def.$base_specificity = function() {
        var self = this;

        return 40;
      };

      return (def.$context_from = function(subject) {
        var self = this;

        return $rb_plus(subject.$children(), subject.$parent().$children());
      }, nil) && 'context_from';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/subquery"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$kind_of?', '$[]', '$shift', '$last_new', '$last_match_for', '$nil?', '$!', '$==', '$length', '$objects', '$children']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Subquery(){};
      var self = $Subquery = $klass($base, $super, 'Subquery', $Subquery);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.parent = nil;
      def.$base_specificity = function() {
        var self = this;

        return 40;
      };

      def.$initialize = TMP_1 = function(arguments$) {var $zuper = $slice.call(arguments, 0);
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        arguments$ = $slice.call(arguments, 0);
        TMP_1.$$p = null;
        if ((($a = arguments$['$[]'](0)['$kind_of?']((($scope.get('Query')).$$scope.get('Base')))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.parent = arguments$.$shift()
          } else {
          self.parent = $scope.get('Query').$last_new()
        };
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
      };

      return (def.$context_from = function(subject) {
        var $a, $b, self = this, last = nil;

        last = self.parent.$last_match_for(subject);
        if ((($a = ((($b = last['$nil?']()) !== false && $b !== nil) ? $b : last.$objects().$length()['$=='](1)['$!']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return []};
        return last.$objects()['$[]'](0).$children();
      }, nil) && 'context_from';
    })(self, $scope.get('Base'))
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query/matches"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Query');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Matches(){};
      var self = $Matches = $klass($base, $super, 'Matches', $Matches);

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_reader("objects", "matching_text", "remainder");

      return (def.$initialize = function(objects, matching_text, remainder) {
        var self = this;

        self.objects = objects;
        self.matching_text = matching_text;
        self.remainder = remainder;
        return (Opal.cvars['@@last_match'] = self);
      }, nil) && 'initialize';
    })(self, null)
  })($scope.get('Gamefic'))
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/query"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$autoload', '$last_new', '$include?', '$split', '$shift', '$!', '$==', '$strip', '$push', '$each', '$split_words', '$uid', '$[]', '$new', '$join', '$length', '$match', '$objects', '$kind_of?', '$&', '$children', '$matching_text', '$remainder', '$last', '$found_in', '$keywords', '$pop', '$clear', '$downcase', '$first', '$clone']);
  self.$require("gamefic/keywords");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Query');

      var def = self.$$proto, $scope = self.$$scope;

      self.$autoload("Base", "gamefic/query/base");

      self.$autoload("Text", "gamefic/query/text");

      self.$autoload("Self", "gamefic/query/self");

      self.$autoload("Parent", "gamefic/query/parent");

      self.$autoload("Children", "gamefic/query/children");

      self.$autoload("ManyChildren", "gamefic/query/many_children");

      self.$autoload("Siblings", "gamefic/query/siblings");

      self.$autoload("Family", "gamefic/query/family");

      self.$autoload("Subquery", "gamefic/query/subquery");

      self.$autoload("Matches", "gamefic/query/matches");

      (Opal.cvars['@@ignored_words'] = ["a", "an", "the"]);

      (Opal.cvars['@@subquery_prepositions'] = ["in", "on", "of", "inside", "from"]);

      Opal.defs(self, '$last_new', function() {
        var self = this;

        return $scope.get('Base').$last_new();
      });

      Opal.defs(self, '$match', function(description, array) {try {

        var $a, $b, TMP_1, $c, TMP_2, $d, $e, $f, TMP_3, $g, self = this, tmp = nil, keywords = nil, first = nil, used = nil, skipped = nil, possibilities = nil, at_least_one_match = nil, next_word = nil, so_far = nil, in_matched = nil, parent = nil, subset = nil, new_results = nil, most_matches = nil, intersection = nil, recursed = nil, objects = nil, obj = nil, combined = nil, r = nil;

        if ((($a = description['$include?'](",")) !== nil && (!$a.$$is_boolean || $a == true))) {
          tmp = description.$split(",", -1);
          keywords = [];
          first = tmp.$shift();
          if ((($a = first.$strip()['$==']("")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            keywords.$push(first.$strip())};
          ($a = ($b = tmp).$each, $a.$$p = (TMP_1 = function(t){var self = TMP_1.$$s || this, $a;
if (t == null) t = nil;
          keywords.$push(",");
            if ((($a = t.$strip()['$==']("")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return keywords = $rb_plus(keywords, t.$strip().$split_words())
              } else {
              return nil
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
          } else {
          keywords = description.$split_words()
        };
        ($a = ($c = array).$each, $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
        if (e.$uid()['$=='](keywords['$[]'](0))) {
            Opal.ret($scope.get('Matches').$new([e], keywords.$shift(), keywords.$join(" ")))
            } else {
            return nil
          }}, TMP_2.$$s = self, TMP_2), $a).call($c);
        used = [];
        skipped = [];
        possibilities = array;
        at_least_one_match = false;
        while ($rb_gt(keywords.$length(), 0)) {
        next_word = keywords.$shift();
        if ((($d = (($e = Opal.cvars['@@subquery_prepositions']) == null ? nil : $e)['$include?'](next_word)) !== nil && (!$d.$$is_boolean || $d == true))) {
          so_far = keywords.$join(" ");
          in_matched = self.$match(so_far, array);
          if ((($d = (($e = $rb_gt(in_matched.$objects().$length(), 0)) ? (((($f = in_matched.$objects().$length()['$=='](1)) !== false && $f !== nil) ? $f : in_matched.$objects()['$[]'](0)['$kind_of?']($scope.get('Array')))) : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
            parent = in_matched.$objects().$shift();
            subset = self.$match(used.$join(" "), (array['$&'](((function() {if ((($d = parent['$kind_of?']($scope.get('Array'))) !== nil && (!$d.$$is_boolean || $d == true))) {
              return parent['$[]'](0).$children()
              } else {
              return parent.$children()
            }; return nil; })()))));
            if (subset.$objects().$length()['$=='](1)) {
              if (in_matched.$objects().$length()['$=='](0)) {
                return subset
                } else {
                return $scope.get('Matches').$new($rb_plus([subset.$objects()], in_matched.$objects()), subset.$matching_text(), subset.$remainder())
              }};};};
        used.$push(next_word);
        if ((($d = (($e = Opal.cvars['@@ignored_words']) == null ? nil : $e)['$include?'](next_word)) !== nil && (!$d.$$is_boolean || $d == true))) {
          continue;};
        new_results = [];
        most_matches = 0.0;
        ($d = ($e = possibilities).$each, $d.$$p = (TMP_3 = function(p){var self = TMP_3.$$s || this, words = nil, matches = nil;
if (p == null) p = nil;
        words = $scope.get('Keywords').$new(used.$last());
          if ($rb_gt(words.$length(), 0)) {
            matches = words.$found_in(p.$keywords());
            if ($rb_gt(matches, 0)) {
              new_results.$push(p);
              return most_matches = matches;
              } else {
              return nil
            };
            } else {
            return nil
          };}, TMP_3.$$s = self, TMP_3), $d).call($e);
        if ($rb_gt(new_results.$length(), 0)) {
          at_least_one_match = true;
          intersection = possibilities['$&'](new_results);
          if (intersection.$length()['$=='](0)) {
            skipped.$push(used.$pop())
            } else {
            skipped.$clear();
            possibilities = intersection;
          };
        } else if ((($d = ((($f = next_word.$downcase()['$==']("and")) !== false && $f !== nil) ? $f : next_word['$=='](","))) !== nil && (!$d.$$is_boolean || $d == true))) {
          while ((($f = ((($g = keywords.$first()['$=='](",")) !== false && $g !== nil) ? $g : keywords.$first().$downcase()['$==']("and"))) !== nil && (!$f.$$is_boolean || $f == true))) {
          used.$push(keywords.$shift())};
          so_far = keywords.$join(" ");
          recursed = self.$match(so_far, array);
          possibilities = [possibilities];
          objects = recursed.$objects().$clone();
          while ($rb_gt(objects.$length(), 0)) {
          obj = objects.$shift();
          if ((($f = obj['$kind_of?']($scope.get('Array'))) !== nil && (!$f.$$is_boolean || $f == true))) {
            possibilities.$push(obj)
            } else {
            combined = $rb_plus([obj], objects);
            possibilities.$push(combined);
            break;;
          };};
          used = $rb_plus(used, recursed.$matching_text().$split_words());
          skipped = recursed.$remainder().$split_words();
          keywords = [];
          } else {
          skipped.$push(used.$pop());
          if ((($d = at_least_one_match['$!']()) !== nil && (!$d.$$is_boolean || $d == true))) {
            return $scope.get('Matches').$new([], "", description)};
        };};
        if ((($a = (($d = at_least_one_match !== false && at_least_one_match !== nil) ? $rb_gt(($rb_minus(used, (($f = Opal.cvars['@@ignored_words']) == null ? nil : $f))).$length(), 0) : $d)) !== nil && (!$a.$$is_boolean || $a == true))) {
          r = $scope.get('Matches').$new(possibilities, used.$join(" "), skipped.$join(" "));
          return r;
          } else {
          return $scope.get('Matches').$new([], "", description)
        };
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      });
    })(self);

    (function($base) {
      var self = $module($base, 'Use');

      var def = self.$$proto, $scope = self.$$scope;

      nil
    })(self);
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/action"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$attr_writer', '$!', '$kind_of?', '$to_s', '$==', '$nil?', '$raise', '$length', '$arity', '$send', '$each', '$specificity', '$call', '$push', '$signature', '$gsub', '$join', '$private', '$new', '$class', '$superclass']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Action(){};
      var self = $Action = $klass($base, $super, 'Action', $Action);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.proc = def.queries = def.command = def.key = def.meta = nil;
      self.$attr_reader("order_key", "queries");

      self.$attr_writer("meta");

      (Opal.cvars['@@order_key_seed'] = 0);

      def.$initialize = TMP_1 = function(story, command, queries) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, proc = $iter || nil;

        queries = $slice.call(arguments, 2);
        TMP_1.$$p = null;
        if ((($a = command['$kind_of?']($scope.get('Symbol'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          command = command.$to_s();
          if (command['$==']("")) {
            command = nil};};
        self.plot = story;
        self.order_key = (($a = Opal.cvars['@@order_key_seed']) == null ? nil : $a);
        (Opal.cvars['@@order_key_seed'] = $rb_plus((($a = Opal.cvars['@@order_key_seed']) == null ? nil : $a), 1));
        self.proc = proc;
        if ((($a = ((($b = command['$kind_of?']($scope.get('Symbol'))['$=='](false)) ? command['$nil?']()['$!']() : $b))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Action commands must be symbols")};
        if ((($a = self.proc['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = ($rb_plus(queries.$length(), 1)['$=='](self.proc.$arity())['$!']()), $b !== false && $b !== nil ?((($c = queries.$length()['$=='](0)) ? self.proc.$arity()['$=='](-1)['$!']() : $c)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("Number of queries is not compatible with proc arguments")}};
        self.command = command;
        self.queries = queries;
        if ((($a = story['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return story.$send("add_action", self)
          } else {
          return nil
        };
      };

      def.$block = function() {
        var self = this;

        return self.proc;
      };

      def.$specificity = function() {
        var $a, $b, TMP_2, self = this, spec = nil, magnitude = nil;

        spec = 0;
        magnitude = 1;
        ($a = ($b = self.queries).$each, $a.$$p = (TMP_2 = function(q){var self = TMP_2.$$s || this, $a;
if (q == null) q = nil;
        if ((($a = q['$kind_of?']((($scope.get('Query')).$$scope.get('Base')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return spec = $rb_plus(spec, ($rb_times(q.$specificity(), magnitude)))
            } else {
            return spec = $rb_plus(spec, magnitude)
          }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return spec;
      };

      def.$verb = function() {
        var self = this;

        return self.command;
      };

      def.$command = function() {
        var self = this;

        return self.command;
      };

      def.$key = function() {
        var self = this;

        return self.key;
      };

      def.$execute = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = self.proc).$call.apply($a, [].concat(args));
      };

      def.$signature = function() {
        var $a, $b, TMP_3, self = this, sig = nil;

        sig = ["" + (self.command)];
        ($a = ($b = self.queries).$each, $a.$$p = (TMP_3 = function(q){var self = TMP_3.$$s || this;
if (q == null) q = nil;
        return sig.$push(q.$signature())}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return sig.$join(", ").$gsub(/Gamefic::/, "");
      };

      def['$meta?'] = function() {
        var $a, self = this;

        return ((($a = self.meta) !== false && $a !== nil) ? $a : self.meta = false);
      };

      self.$private();

      return (Opal.defs(self, '$explode', function(entity) {
        var $a, $b, self = this, arr = nil, cls = nil;

        arr = $scope.get('Array').$new();
        arr.$push(entity);
        cls = entity.$class();
        while ((($b = cls['$==']($scope.get('Object'))['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
        arr.$push(cls);
        cls = cls.$superclass();};
        arr.$push($scope.get('String'));
        return arr.$push(nil);
      }), nil) && 'explode';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/syntax/match"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $super) {
    function $Match(){};
    var self = $Match = $klass($base, $super, 'Match', $Match);

    var def = self.$$proto, $scope = self.$$scope;

    self.$attr_reader("verb", "arguments");

    return (def.$initialize = function(verb, arguments$) {
      var self = this;

      self.verb = verb;
      return self["arguments"] = arguments$;
    }, nil) && 'initialize';
  })((($scope.get('Gamefic')).$$scope.get('Syntax')), null)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/syntax"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$autoload', '$attr_reader', '$join', '$split_words', '$length', '$==', '$[]', '$!', '$nil?', '$to_sym', '$to_s', '$each', '$match', '$push', '$index', '$new', '$send', '$to_i', '$signature', '$translate']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Syntax(){};
      var self = $Syntax = $klass($base, $super, 'Syntax', $Syntax);

      var def = self.$$proto, $scope = self.$$scope;

      def.token_count = def.regexp = def.replace = def.verb = nil;
      self.$autoload("Match", "gamefic/syntax/match");

      self.$attr_reader("token_count", "first_word", "verb", "template", "command");

      (Opal.cvars['@@phrase'] = "([\\w\\W\\s\\S]*?)");

      def.$initialize = function(plot, template, command) {
        var $a, $b, TMP_1, $c, TMP_2, self = this, words = nil, command_words = nil, tokens = nil, variable_tokens = nil, last_token_is_reg = nil, subs = nil, index = nil;

        command = $slice.call(arguments, 2);
        command = command.$join(" ");
        words = template.$split_words();
        self.token_count = words.$length();
        command_words = command.$split_words();
        self.verb = nil;
        if (words['$[]'](0)['$[]'](0)['$=='](":")) {
          self.token_count = $rb_minus(self.token_count, 1);
          self.first_word = "";
          } else {
          if ((($a = command_words['$[]'](0)['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.verb = command_words['$[]'](0).$to_sym()};
          self.first_word = words['$[]'](0).$to_s();
        };
        self.command = command_words.$join(" ");
        self.template = words.$join(" ");
        tokens = [];
        variable_tokens = [];
        last_token_is_reg = false;
        ($a = ($b = words).$each, $a.$$p = (TMP_1 = function(w){var self = TMP_1.$$s || this, $a;
if (w == null) w = nil;
        if ((($a = w.$match(/^:[a-z0-9_]+$/i)) !== nil && (!$a.$$is_boolean || $a == true))) {
            variable_tokens.$push(w);
            if (last_token_is_reg !== false && last_token_is_reg !== nil) {
              return nil;
              } else {
              tokens.$push((($a = Opal.cvars['@@phrase']) == null ? nil : $a));
              return last_token_is_reg = true;
            };
            } else {
            tokens.$push(w);
            return last_token_is_reg = false;
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        subs = [];
        index = 0;
        ($a = ($c = command_words).$each, $a.$$p = (TMP_2 = function(t){var self = TMP_2.$$s || this;
if (t == null) t = nil;
        if (t['$[]'](0)['$=='](":")) {
            index = $rb_plus(variable_tokens.$index(t), 1);
            return subs.$push("{$" + (index) + "}");
            } else {
            return subs.$push(t)
          }}, TMP_2.$$s = self, TMP_2), $a).call($c);
        self.replace = subs.$join(" ");
        self.regexp = $scope.get('Regexp').$new("^" + (tokens.$join(" ")) + "$", (($scope.get('Regexp')).$$scope.get('IGNORECASE')));
        if ((($a = plot['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return plot.$send("add_syntax", self)
          } else {
          return nil
        };
      };

      def.$translate = function(text) {
        var $a, $b, TMP_3, self = this, m = nil, arguments$ = nil;

        m = text.$match(self.regexp);
        if ((($a = m['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        arguments$ = [];
        ($a = ($b = self.replace.$to_s().$split_words()).$each, $a.$$p = (TMP_3 = function(r){var self = TMP_3.$$s || this, $a;
if (r == null) r = nil;
        if ((($a = r.$match(/^\{\$[0-9]+\}$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return arguments$.$push(m['$[]'](r['$[]']($range(2, -2, false)).$to_i()))
            } else {
            return arguments$.$push(r)
          }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return (($scope.get('Syntax')).$$scope.get('Match')).$new(self.verb, arguments$);
      };

      def.$signature = function() {
        var self = this;

        return [self.regexp, self.replace];
      };

      def['$=='] = function(other) {
        var self = this;

        return self.$signature()['$=='](other.$signature());
      };

      return (Opal.defs(self, '$match', function(text, syntaxes) {
        var $a, $b, TMP_4, self = this, matches = nil;

        matches = [];
        ($a = ($b = syntaxes).$each, $a.$$p = (TMP_4 = function(syntax){var self = TMP_4.$$s || this, $a, result = nil;
if (syntax == null) syntax = nil;
        result = syntax.$translate(text);
          if ((($a = result['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return matches.$push(result)
            } else {
            return nil
          };}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return matches;
      }), nil) && 'match';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/rule"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$call']);
  (function($base, $super) {
    function $Rule(){};
    var self = $Rule = $klass($base, $super, 'Rule', $Rule);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.block = nil;
    self.$attr_reader("caller");

    def.$initialize = TMP_1 = function(name) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      self.name = name;
      return self.block = block;
    };

    return (def.$test = function(actor, verb, arguments$) {
      var self = this;

      return self.block.$call(actor, verb, arguments$);
    }, nil) && 'test';
  })(self, null);
  return (function($base, $super) {
    function $Assert(){};
    var self = $Assert = $klass($base, $super, 'Assert', $Assert);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Rule'));
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/stage"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$generate_stage', '$nil?', '$module_eval', '$module_exec', '$to_proc', '$private', '$!', '$keys', '$exposed_methods', '$class', '$mounted_modules', '$new', '$define_singleton_method', '$==', '$length', '$caller', '$include?', '$[]', '$raise', '$each', '$public_send', '$__instance__', '$public_instance_methods', '$include', '$[]=', '$dup', '$from_superclass', '$respond_to?', '$superclass', '$send', '$extend']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Stage');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$stage', TMP_1 = function(args) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, s = nil;

        args = $slice.call(arguments, 0);
        TMP_1.$$p = null;
        s = self.$generate_stage();
        if ((($a = block['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = s).$module_eval.apply($a, [].concat(args))
          } else {
          return ($b = ($c = s).$module_exec, $b.$$p = block.$to_proc(), $b).apply($c, [].concat(args))
        };
      });

      self.$private();

      Opal.defn(self, '$generate_stage', function() {
        var $a, $b, TMP_2, self = this, exposed = nil, mounted = nil, instance = nil;
        if (self.stage == null) self.stage = nil;

        if ((($a = self.stage['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.stage};
        exposed = self.$class().$exposed_methods().$keys();
        mounted = self.$class().$mounted_modules().$keys();
        instance = self;
        self.stage = ($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c, TMP_4, $d, TMP_6;

        ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b;

          if ((($a = ((($b = self.$caller().$length()['$=='](0)) !== false && $b !== nil) ? $b : self.$caller()['$[]'](0)['$include?']("gamefic/stage"))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise($scope.get('NoMethodError').$new("Method __instance__ is not available from the stage."))
            };
            return instance;}, TMP_3.$$s = self, TMP_3), $a).call($b, "__instance__");
          ($a = ($c = exposed).$each, $a.$$p = (TMP_4 = function(exposed_method){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (exposed_method == null) exposed_method = nil;
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_5 = function(args){var self = TMP_5.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
              block = TMP_5.$$p || nil, TMP_5.$$p = null;
            return ($a = ($b = self.$__instance__()).$public_send, $a.$$p = block.$to_proc(), $a).apply($b, [exposed_method].concat(args))}, TMP_5.$$s = self, TMP_5), $a).call($b, exposed_method)}, TMP_4.$$s = self, TMP_4), $a).call($c);
          return ($a = ($d = mounted).$each, $a.$$p = (TMP_6 = function(dsl){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (dsl == null) dsl = nil;
          return ($a = ($b = dsl.$public_instance_methods()).$each, $a.$$p = (TMP_7 = function(method){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (method == null) method = nil;
            return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_8 = function(args){var self = TMP_8.$$s || this, block, $a, $b, result = nil;
args = $slice.call(arguments, 0);
                block = TMP_8.$$p || nil, TMP_8.$$p = null;
              result = ($a = ($b = self.$__instance__()).$public_send, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(args));
                return result;}, TMP_8.$$s = self, TMP_8), $a).call($b, method)}, TMP_7.$$s = self, TMP_7), $a).call($b)}, TMP_6.$$s = self, TMP_6), $a).call($d);}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return self.stage;
      });

      (function($base) {
        var self = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$mount', function(args) {
          var $a, $b, TMP_9, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args).$each, $a.$$p = (TMP_9 = function(a){var self = TMP_9.$$s || this;
if (a == null) a = nil;
          self.$include(a);
            return self.$mounted_modules()['$[]='](a, nil);}, TMP_9.$$s = self, TMP_9), $a).call($b);
        });

        Opal.defn(self, '$expose', function(args) {
          var $a, $b, TMP_10, self = this;

          args = $slice.call(arguments, 0);
          return ($a = ($b = args).$each, $a.$$p = (TMP_10 = function(a){var self = TMP_10.$$s || this;
if (a == null) a = nil;
          return self.$exposed_methods()['$[]='](a, nil)}, TMP_10.$$s = self, TMP_10), $a).call($b);
        });

        Opal.defn(self, '$exposed_methods', function() {
          var $a, $b, self = this;

          return ((($a = (($b = Opal.cvars['@@exposed_methods']) == null ? nil : $b)) !== false && $a !== nil) ? $a : (Opal.cvars['@@exposed_methods'] = self.$from_superclass("exposed_methods", $hash2([], {})).$dup()));
        });

        Opal.defn(self, '$mounted_modules', function() {
          var $a, $b, self = this;

          return ((($a = (($b = Opal.cvars['@@mounted_modules']) == null ? nil : $b)) !== false && $a !== nil) ? $a : (Opal.cvars['@@mounted_modules'] = self.$from_superclass("mounted_modules", $hash2([], {})).$dup()));
        });

        self.$private();

        Opal.defn(self, '$from_superclass', function(m, default$) {
          var $a, self = this;

          if (default$ == null) {
            default$ = nil
          }
          if ((($a = self.$superclass()['$respond_to?'](m)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$superclass().$send(m)
            } else {
            return default$
          };
        });
      })(self);

      Opal.defs(self, '$included', function(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/tester"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$[]=', '$test_procs', '$stage', '$to_proc', '$[]', '$plot', '$length', '$scene']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Tester');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$test_procs', function() {
        var $a, self = this;
        if (self.test_procs == null) self.test_procs = nil;

        return ((($a = self.test_procs) !== false && $a !== nil) ? $a : self.test_procs = $scope.get('Hash').$new());
      });

      Opal.defn(self, '$on_test', TMP_1 = function(name) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (name == null) {
          name = "me"
        }
        TMP_1.$$p = null;
        return self.$test_procs()['$[]='](name, block);
      });

      Opal.defn(self, '$run_test', function(name, actor) {
        var $a, $b, self = this, queue = nil;

        queue = [];
        ($a = ($b = actor.$plot()).$stage, $a.$$p = self.$test_procs()['$[]'](name).$to_proc(), $a).call($b, actor, queue);
        actor['$[]=']("test_queue", queue);
        actor['$[]=']("test_queue_length", queue.$length());
        actor['$[]=']("test_queue_scene", actor.$scene());
        return actor['$[]=']("testing", true);
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/source"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$each', '$absolute_path', '$main_dir', '$file?', '$new', '$raise', '$directory?', '$dirname', '$[]', '$length', '$basename', '$extname', '$push']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Source(){};
      var self = $Source = $klass($base, $super, 'Source', $Source);

      var def = self.$$proto, $scope = self.$$scope;

      def.directories = nil;
      (Opal.cvars['@@extensions'] = ["", ".plot", ".rb"]);

      self.$attr_reader("directories");

      self.$attr_accessor("main_dir");

      def.$initialize = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return self.directories = ((($a = args) !== false && $a !== nil) ? $a : []);
      };

      def.$export = function(name) {try {

        var $a, $b, TMP_1, self = this;

        ($a = ($b = self.directories).$each, $a.$$p = (TMP_1 = function(directory){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c;
if (directory == null) directory = nil;
        return ($a = ($b = (($c = Opal.cvars['@@extensions']) == null ? nil : $c)).$each, $a.$$p = (TMP_2 = function(ext){var self = TMP_2.$$s || this, $a, abs_dir = nil, abs_file = nil;
if (ext == null) ext = nil;
          abs_dir = $scope.get('File').$absolute_path(directory, self.$main_dir());
            abs_file = $rb_plus($rb_plus($rb_plus(abs_dir, "/"), name), ext);
            if ((($a = $scope.get('File')['$file?'](abs_file)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret($scope.get('Script').$new(abs_file, abs_dir))
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2), $a).call($b)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return self.$raise("Script " + (name) + " not found");
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      return (def.$search = function(path) {
        var $a, $b, TMP_3, self = this, found = nil;

        found = [];
        ($a = ($b = self.directories).$each, $a.$$p = (TMP_3 = function(base){var self = TMP_3.$$s || this, $a, $b, TMP_4, absolute = nil;
if (base == null) base = nil;
        absolute = $scope.get('File').$absolute_path(base, self.$main_dir());
          if ((($a = $scope.get('File')['$directory?']($rb_plus($rb_plus(absolute, "/"), path))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = $scope.get('Dir')['$[]']($rb_plus($rb_plus($rb_plus($rb_plus(absolute, "/"), path), "/"), "*"))).$each, $a.$$p = (TMP_4 = function(file){var self = TMP_4.$$s || this, name = nil;
if (file == null) file = nil;
            name = $rb_plus($rb_plus($scope.get('File').$dirname(file['$[]']($range((base.$length()), -1, false))), "/"), $scope.get('File').$basename(file, $scope.get('File').$extname(file)));
              return found.$push(name);}, TMP_4.$$s = self, TMP_4), $a).call($b)
            } else {
            return nil
          };}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return found;
      }, nil) && 'search';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/script"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$gsub', '$[]', '$length', '$dirname', '$basename', '$extname', '$read', '$==', '$base']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Script(){};
      var self = $Script = $klass($base, $super, 'Script', $Script);

      var def = self.$$proto, $scope = self.$$scope;

      def.relative = def.absolute = nil;
      self.$attr_reader("absolute", "relative", "base", "read");

      def.$initialize = function(filename, directory) {
        var self = this;

        self.absolute = filename.$gsub(/\/+/, "/");
        self.relative = filename['$[]']($range(directory.$length(), -1, false)).$gsub(/\/+/, "/");
        return self.base = ($rb_plus($rb_plus($scope.get('File').$dirname(self.relative), "/"), $scope.get('File').$basename(self.relative, $scope.get('File').$extname(self.relative)))).$gsub(/\/+/, "/");
      };

      def.$read = function() {
        var self = this;

        return $scope.get('File').$read(self.absolute);
      };

      return (def['$=='] = function(other) {
        var self = this;

        return self.$base()['$=='](other.$base());
      }, nil) && '==';
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot/article_mount"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$indefinitely', '$definitely', '$cap_first']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ArticleMount');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$a', function(entity) {
        var self = this;

        return entity.$indefinitely();
      });

      Opal.defn(self, '$an', function(entity) {
        var self = this;

        return entity.$indefinitely();
      });

      Opal.defn(self, '$the', function(entity) {
        var self = this;

        return entity.$definitely();
      });

      Opal.defn(self, '$A', function(entity) {
        var self = this;

        return entity.$indefinitely().$cap_first();
      });

      Opal.defn(self, '$An', function(entity) {
        var self = this;

        return entity.$indefinitely().$cap_first();
      });

      Opal.defn(self, '$The', function(entity) {
        var self = this;

        return entity.$definitely().$cap_first();
      });
    })(self)
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot/you_mount"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$nil?', '$new', '$person=']);
  self.$require("gamefic");
  self.$require("gamefic/grammar");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'YouMount');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $YouGrammarSet(){};
        var self = $YouGrammarSet = $klass($base, $super, 'YouGrammarSet', $YouGrammarSet);

        var def = self.$$proto, $scope = self.$$scope;

        self.$include((($scope.get('Grammar')).$$scope.get('Gender')));

        self.$include((($scope.get('Grammar')).$$scope.get('Person')));

        self.$include((($scope.get('Grammar')).$$scope.get('Plural')));

        return self.$include((($scope.get('Grammar')).$$scope.get('WordAdapter')));
      })(self, null);

      Opal.defn(self, '$you', function() {
        var $a, $b, self = this;
        if (self.you == null) self.you = nil;

        if ((($a = self.you['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.you = $scope.get('YouGrammarSet').$new();
          (($a = [2]), $b = self.you, $b['$person='].apply($b, $a), $a[$a.length-1]);};
        return self.you;
      });
    })(self)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot/scene_mount"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]=', '$new', '$scene_managers', '$start', '$options=', '$finish', '$to_proc', '$prompt=', '$answer', '$tell', '$call', '$==', '$key', '$scene', '$cue', '$next_cue', '$next_cue=', '$state=', '$[]', '$!', '$state', '$raise', '$scene=', '$prepare', '$NotConclusionError']);
  (function($base, $super) {
    function $NotConclusionError(){};
    var self = $NotConclusionError = $klass($base, $super, 'NotConclusionError', $NotConclusionError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })(self, $scope.get('Exception'));
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'SceneMount');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_10, TMP_14, TMP_16;

      Opal.defn(self, '$scene_managers', function() {
        var $a, self = this;
        if (self.scene_managers == null) self.scene_managers = nil;

        if ((($a = self.scene_managers['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          ((($a = self.scene_managers) !== false && $a !== nil) ? $a : self.scene_managers = $hash2([], {}));
          self.scene_managers['$[]=']("active", $scope.get('ActiveSceneManager').$new());
          self.scene_managers['$[]=']("concluded", $scope.get('ConcludedSceneManager').$new());};
        return self.scene_managers;
      });

      Opal.defn(self, '$multiple_choice', TMP_1 = function(key, args) {
        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        return self.$scene_managers()['$[]='](key, ($a = ($b = $scope.get('MultipleChoiceSceneManager')).$new, $a.$$p = (TMP_2 = function(config){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c;
if (config == null) config = nil;
        ($a = ($b = config).$start, $a.$$p = (TMP_3 = function(actor, data){var self = TMP_3.$$s || this, $a, $b;
if (actor == null) actor = nil;if (data == null) data = nil;
          return (($a = [args]), $b = data, $b['$options='].apply($b, $a), $a[$a.length-1])}, TMP_3.$$s = self, TMP_3), $a).call($b);
          return ($a = ($c = config).$finish, $a.$$p = block.$to_proc(), $a).call($c);}, TMP_2.$$s = self, TMP_2), $a).call($b));
      });

      Opal.defn(self, '$yes_or_no', TMP_4 = function(key, prompt) {
        var $a, $b, TMP_5, self = this, $iter = TMP_4.$$p, block = $iter || nil, manager = nil;

        if (prompt == null) {
          prompt = nil
        }
        TMP_4.$$p = null;
        manager = ($a = ($b = $scope.get('YesOrNoSceneManager')).$new, $a.$$p = (TMP_5 = function(config){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (config == null) config = nil;
        (($a = [prompt]), $b = config, $b['$prompt='].apply($b, $a), $a[$a.length-1]);
          return ($a = ($b = config).$finish, $a.$$p = (TMP_6 = function(actor, data){var self = TMP_6.$$s || this, $a;
if (actor == null) actor = nil;if (data == null) data = nil;
          if ((($a = data.$answer()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return actor.$tell("Please answer Yes or No.")
              } else {
              block.$call(actor, data);
              if (actor.$scene().$key()['$=='](key)) {
                return self.$cue(actor, "active")
                } else {
                return nil
              };
            }}, TMP_6.$$s = self, TMP_6), $a).call($b);}, TMP_5.$$s = self, TMP_5), $a).call($b);
        return self.$scene_managers()['$[]='](key, manager);
      });

      Opal.defn(self, '$prompt', TMP_7 = function(key, prompt) {
        var $a, $b, TMP_8, $c, self = this, $iter = TMP_7.$$p, block = $iter || nil;

        TMP_7.$$p = null;
        self.$scene_managers()['$[]='](key, ($a = ($b = $scope.get('SceneManager')).$new, $a.$$p = (TMP_8 = function(config){var self = TMP_8.$$s || this, $a, $b, TMP_9;
if (config == null) config = nil;
        (($a = [prompt]), $b = config, $b['$prompt='].apply($b, $a), $a[$a.length-1]);
          return ($a = ($b = config).$finish, $a.$$p = (TMP_9 = function(actor, data){var self = TMP_9.$$s || this, $a, $b;
if (actor == null) actor = nil;if (data == null) data = nil;
          ($a = data, ((($b = $a.$next_cue()) !== false && $b !== nil) ? $b : $a['$next_cue=']("active")));
            block.$call(actor, data);
            return self.$cue(actor, data.$next_cue());}, TMP_9.$$s = self, TMP_9), $a).call($b);}, TMP_8.$$s = self, TMP_8), $a).call($b));
        return (($a = ["Prompted"]), $c = self.$scene_managers()['$[]'](key), $c['$state='].apply($c, $a), $a[$a.length-1]);
      });

      Opal.defn(self, '$pause', TMP_10 = function(key) {
        var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil, manager = nil;

        TMP_10.$$p = null;
        manager = ($a = ($b = $scope.get('PausedSceneManager')).$new, $a.$$p = (TMP_11 = function(config){var self = TMP_11.$$s || this, $a, $b, TMP_12, $c, TMP_13;
if (config == null) config = nil;
        ($a = ($b = config).$start, $a.$$p = (TMP_12 = function(actor, data){var self = TMP_12.$$s || this, $a, $b;
if (actor == null) actor = nil;if (data == null) data = nil;
          (($a = ["active"]), $b = data, $b['$next_cue='].apply($b, $a), $a[$a.length-1]);
            return block.$call(actor, data);}, TMP_12.$$s = self, TMP_12), $a).call($b);
          return ($a = ($c = config).$finish, $a.$$p = (TMP_13 = function(actor, data){var self = TMP_13.$$s || this, $a;
if (actor == null) actor = nil;if (data == null) data = nil;
          if (actor.$scene().$key()['$=='](key)) {
              return self.$cue(actor, (((($a = data.$next_cue()) !== false && $a !== nil) ? $a : "active")))
              } else {
              return nil
            }}, TMP_13.$$s = self, TMP_13), $a).call($c);}, TMP_11.$$s = self, TMP_11), $a).call($b);
        return self.$scene_managers()['$[]='](key, manager);
      });

      Opal.defn(self, '$conclusion', TMP_14 = function(key) {
        var $a, $b, TMP_15, self = this, $iter = TMP_14.$$p, block = $iter || nil, manager = nil;

        TMP_14.$$p = null;
        manager = ($a = ($b = $scope.get('ConcludedSceneManager')).$new, $a.$$p = (TMP_15 = function(config){var self = TMP_15.$$s || this, $a, $b;
if (config == null) config = nil;
        return ($a = ($b = config).$start, $a.$$p = block.$to_proc(), $a).call($b)}, TMP_15.$$s = self, TMP_15), $a).call($b);
        return self.$scene_managers()['$[]='](key, manager);
      });

      Opal.defn(self, '$scene', TMP_16 = function(key) {
        var $a, $b, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil, scene = nil;

        TMP_16.$$p = null;
        scene = ($a = ($b = $scope.get('SceneManager')).$new, $a.$$p = (TMP_17 = function(manager){var self = TMP_17.$$s || this, $a, $b, TMP_18, $c, TMP_19;
if (manager == null) manager = nil;
        ($a = ($b = manager).$start, $a.$$p = (TMP_18 = function(actor, data){var self = TMP_18.$$s || this, $a, $b;
if (actor == null) actor = nil;if (data == null) data = nil;
          block.$call(actor, data);
            return (($a = ["active"]), $b = data, $b['$next_cue='].apply($b, $a), $a[$a.length-1]);}, TMP_18.$$s = self, TMP_18), $a).call($b);
          return ($a = ($c = manager).$finish, $a.$$p = (TMP_19 = function(actor, data){var self = TMP_19.$$s || this;
if (actor == null) actor = nil;if (data == null) data = nil;
          return self.$cue(actor, data.$next_cue())}, TMP_19.$$s = self, TMP_19), $a).call($c);}, TMP_17.$$s = self, TMP_17), $a).call($b);
        return self.$scene_managers()['$[]='](key, scene);
      });

      Opal.defn(self, '$cue', function(actor, key) {
        var $a, $b, self = this, manager = nil;
        if (self.scene == null) self.scene = nil;

        if ((($a = ($b = actor.$scene()['$nil?']()['$!'](), $b !== false && $b !== nil ?actor.$scene().$state()['$==']("Concluded") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = key['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Cueing scene with nil key")};
        manager = self.$scene_managers()['$[]'](key);
        if ((($a = manager['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("No '" + (key) + "' scene found")
          } else {
          (($a = [manager.$prepare(key)]), $b = actor, $b['$scene='].apply($b, $a), $a[$a.length-1]);
          if (actor.$scene().$state()['$==']("Passive")) {
            actor.$scene().$start(actor);
            actor.$scene().$finish(actor, nil);};
        };
        return self.scene;
      });

      Opal.defn(self, '$conclude', function(actor, key) {
        var $a, self = this, manager = nil;

        if ((($a = key['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          key = "concluded"};
        manager = self.$scene_managers()['$[]'](key);
        if ((($a = manager.$state()['$==']("Concluded")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise(self.$NotConclusionError("Cued scene '" + (key) + "' is not a conclusion"))};
        return self.$cue(actor, key);
      });
    })($scope.get('Plot'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot/command_mount"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$action', '$to_proc', '$meta=', '$new', '$xlate', '$each', '$first_word', '$!', '$nil?', '$push', '$syntaxes', '$uniq']);
  self.$require("gamefic/action");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'CommandMount');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$meta', TMP_1 = function(command, queries) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, proc = $iter || nil, act = nil;

        queries = $slice.call(arguments, 1);
        TMP_1.$$p = null;
        act = ($a = ($b = self).$action, $a.$$p = proc.$to_proc(), $a).apply($b, [command].concat(queries));
        (($a = [true]), $c = act, $c['$meta='].apply($c, $a), $a[$a.length-1]);
        return act;
      });

      Opal.defn(self, '$action', TMP_2 = function(command, queries) {
        var $a, $b, self = this, $iter = TMP_2.$$p, proc = $iter || nil;

        queries = $slice.call(arguments, 1);
        TMP_2.$$p = null;
        return ($a = ($b = $scope.get('Action')).$new, $a.$$p = proc.$to_proc(), $a).apply($b, [self, command].concat(queries));
      });

      Opal.defn(self, '$respond', TMP_3 = function(command, queries) {
        var $a, $b, self = this, $iter = TMP_3.$$p, proc = $iter || nil;

        queries = $slice.call(arguments, 1);
        TMP_3.$$p = null;
        return ($a = ($b = self).$action, $a.$$p = proc.$to_proc(), $a).apply($b, [command].concat(queries));
      });

      Opal.defn(self, '$interpret', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = self).$xlate.apply($a, [].concat(args));
      });

      Opal.defn(self, '$syntax', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = self).$xlate.apply($a, [].concat(args));
      });

      Opal.defn(self, '$xlate', function(args) {
        var $a, self = this, syn = nil;

        args = $slice.call(arguments, 0);
        syn = ($a = $scope.get('Syntax')).$new.apply($a, [self].concat(args));
        return syn;
      });

      Opal.defn(self, '$commandwords', function() {
        var $a, $b, TMP_4, self = this, words = nil;

        words = $scope.get('Array').$new();
        ($a = ($b = self.$syntaxes()).$each, $a.$$p = (TMP_4 = function(s){var self = TMP_4.$$s || this, $a, word = nil;
if (s == null) s = nil;
        word = s.$first_word();
          if ((($a = word['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return words.$push(word)
            } else {
            return nil
          };}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return words.$uniq();
      });
    })($scope.get('Plot'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot/entity_mount"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$to_proc', '$==', '$kind_of?', '$raise', '$match', '$entities', '$length', '$objects', '$[]']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'EntityMount');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$make', TMP_1 = function(cls, args) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, ent = nil;

        if (args == null) {
          args = $hash2([], {})
        }
        TMP_1.$$p = null;
        ent = ($a = ($b = cls).$new, $a.$$p = block.$to_proc(), $a).call($b, self, args);
        if (ent['$kind_of?']($scope.get('Entity'))['$=='](false)) {
          self.$raise("Invalid entity class")};
        return ent;
      });

      Opal.defn(self, '$pick', function(description) {
        var self = this, result = nil;

        result = $scope.get('Query').$match(description, self.$entities());
        if (result.$objects().$length()['$=='](0)) {
          self.$raise($scope.get('IndexError').$new("Unable to find entity from '" + (description) + "'"))
        } else if ($rb_gt(result.$objects().$length(), 1)) {
          self.$raise($scope.get('IndexError').$new("Ambiguous entities found from '" + (description) + "'"))};
        return result.$objects()['$[]'](0);
      });
    })($scope.get('Plot'))
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot/query_mount"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'QueryMount');

      var def = self.$$proto, $scope = self.$$scope;

      nil
    })($scope.get('Plot'));

    (function($base) {
      var self = $module($base, 'Query');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$siblings', function(arguments$) {
        var $a, self = this;

        arguments$ = $slice.call(arguments, 0);
        return ($a = $scope.get('Siblings')).$new.apply($a, [].concat(arguments$));
      })
    })(self);
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/plot"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$autoload', '$attr_reader', '$attr_accessor', '$include', '$mount', '$expose', '$new', '$post_initialize', '$flatten', '$values', '$clone', '$[]', '$[]=', '$to_proc', '$push', '$!', '$==', '$call', '$nil?', '$parent', '$scene', '$cue', '$default_scene', '$update', '$each', '$start', '$process_input', '$update_player', '$tell', '$exist?', '$main_dir=', '$dirname', '$source', '$stage', '$read', '$raise', '$import', '$search', '$export', '$include?', '$imported_scripts', '$absolute', '$pop', '$private', '$shift', '$queue', '$finish', '$delete', '$recursive_update', '$children', '$verb', '$delete_if', '$unshift', '$sort!', '$token_count', '$<=>', '$first_word', '$command', '$specificity', '$order_key', '$gsub', '$to_s', '$queries', '$strip', '$join']);
  self.$require("gamefic/stage");
  self.$require("gamefic/tester");
  self.$require("gamefic/source");
  self.$require("gamefic/script");
  self.$require("gamefic/query");
  self.$require("gamefic/plot/article_mount");
  self.$require("gamefic/plot/you_mount");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Plot(){};
      var self = $Plot = $klass($base, $super, 'Plot', $Plot);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_13;

      def.commands = def.imported_scripts = def.asserts = def.finishes = def.entities = def.syntaxes = def.update_procs = def.players = def.introduction = def.working_scripts = def.player_procs = nil;
      self.$autoload("SceneMount", "gamefic/plot/scene_mount");

      self.$autoload("CommandMount", "gamefic/plot/command_mount");

      self.$autoload("EntityMount", "gamefic/plot/entity_mount");

      self.$autoload("QueryMount", "gamefic/plot/query_mount");

      self.$attr_reader("commands", "imported_scripts", "rules", "asserts", "finishes", "source", "delegate_stack");

      self.$attr_accessor("default_scene");

      self.$include($scope.get('Stage'));

      self.$mount($scope.get('Gamefic'), $scope.get('Tester'), $scope.get('SceneMount'), $scope.get('CommandMount'), $scope.get('EntityMount'), $scope.get('QueryMount'), $scope.get('ArticleMount'), $scope.get('YouMount'));

      self.$expose("require", "introduction", "assert_action", "on_update", "on_player_update", "entities");

      def.$initialize = function(source) {
        var $a, self = this;

        if (source == null) {
          source = nil
        }
        self.source = ((($a = source) !== false && $a !== nil) ? $a : $scope.get('Source').$new());
        self.commands = $scope.get('Hash').$new();
        self.syntaxes = $scope.get('Array').$new();
        self.update_procs = $scope.get('Array').$new();
        self.player_procs = $scope.get('Array').$new();
        self.working_scripts = $scope.get('Array').$new();
        self.imported_scripts = $scope.get('Array').$new();
        self.imported_identifiers = $scope.get('Array').$new();
        self.entities = $scope.get('Array').$new();
        self.players = $scope.get('Array').$new();
        self.asserts = $scope.get('Hash').$new();
        self.finishes = $scope.get('Hash').$new();
        self.default_scene = "active";
        self.delegate_stack = [];
        return self.$post_initialize();
      };

      def.$actions = function() {
        var self = this;

        return self.commands.$values().$flatten();
      };

      def.$actions_with_verb = function(verb) {
        var $a, self = this;

        return ((($a = self.commands['$[]'](verb).$clone()) !== false && $a !== nil) ? $a : []);
      };

      def.$imported_scripts = function() {
        var $a, self = this;

        return ((($a = self.imported_scripts) !== false && $a !== nil) ? $a : self.imported_scripts = []);
      };

      def.$assert_action = TMP_1 = function(name) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        return self.asserts['$[]='](name, ($a = ($b = $scope.get('Assert')).$new, $a.$$p = block.$to_proc(), $a).call($b, name));
      };

      def.$finish_action = TMP_2 = function(name) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return self.finishes['$[]='](name, block);
      };

      def.$post_initialize = function() {
        var self = this;

        return nil;
      };

      def.$entities = function() {
        var self = this;

        return self.entities.$clone();
      };

      def.$syntaxes = function() {
        var self = this;

        return self.syntaxes.$clone();
      };

      def.$on_update = TMP_3 = function() {
        var self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        return self.update_procs.$push(block);
      };

      def.$introduction = TMP_4 = function() {
        var self = this, $iter = TMP_4.$$p, proc = $iter || nil;

        TMP_4.$$p = null;
        return self.introduction = proc;
      };

      def.$introduce = function(player) {
        var $a, self = this;

        self.players.$push(player);
        if ((($a = self.introduction['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.introduction.$call(player)};
        if ((($a = player.$parent()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {};
        if ((($a = player.$scene()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$cue(player, self.$default_scene())};
        return self.$update();
      };

      def.$ready = function() {
        var $a, $b, TMP_5, self = this;

        return ($a = ($b = self.players).$each, $a.$$p = (TMP_5 = function(p){var self = TMP_5.$$s || this;
if (p == null) p = nil;
        return p.$scene().$start(p)}, TMP_5.$$s = self, TMP_5), $a).call($b);
      };

      def.$update = function() {
        var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, $e, TMP_9, self = this;

        ($a = ($b = self.players).$each, $a.$$p = (TMP_6 = function(player){var self = TMP_6.$$s || this;
if (player == null) player = nil;
        return self.$process_input(player)}, TMP_6.$$s = self, TMP_6), $a).call($b);
        ($a = ($c = self.entities).$each, $a.$$p = (TMP_7 = function(e){var self = TMP_7.$$s || this;
if (e == null) e = nil;
        return e.$update()}, TMP_7.$$s = self, TMP_7), $a).call($c);
        ($a = ($d = self.players).$each, $a.$$p = (TMP_8 = function(player){var self = TMP_8.$$s || this;
if (player == null) player = nil;
        return self.$update_player(player)}, TMP_8.$$s = self, TMP_8), $a).call($d);
        return ($a = ($e = self.update_procs).$each, $a.$$p = (TMP_9 = function(p){var self = TMP_9.$$s || this;
if (p == null) p = nil;
        return p.$call()}, TMP_9.$$s = self, TMP_9), $a).call($e);
      };

      def.$tell = function(entities, message, refresh) {
        var $a, $b, TMP_10, self = this;

        if (refresh == null) {
          refresh = false
        }
        return ($a = ($b = entities).$each, $a.$$p = (TMP_10 = function(entity){var self = TMP_10.$$s || this;
if (entity == null) entity = nil;
        return entity.$tell(message, refresh)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      };

      def.$load = function(script) {try {

        var $a, $b, TMP_11, self = this;

        ($a = ($b = ["", ".plot", ".rb"]).$each, $a.$$p = (TMP_11 = function(ext){var self = TMP_11.$$s || this, $a, $b;
if (ext == null) ext = nil;
        if ((($a = $scope.get('File')['$exist?']($rb_plus(script, ext))) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [$scope.get('File').$dirname(script)]), $b = self.$source(), $b['$main_dir='].apply($b, $a), $a[$a.length-1]);
            self.$stage($scope.get('File').$read($rb_plus(script, ext)), $rb_plus(script, ext));
            Opal.ret(nil);
            } else {
            return nil
          }}, TMP_11.$$s = self, TMP_11), $a).call($b);
        return self.$raise("File not found: " + (script));
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$require = function(script) {
        var $a, $b, TMP_12, $c, self = this, imported_script = nil;

        if (script['$[]'](-1)['$==']("*")) {
          return ($a = ($b = self.$source().$search(script['$[]']($range(0, -2, false)))).$each, $a.$$p = (TMP_12 = function(file){var self = TMP_12.$$s || this;
if (file == null) file = nil;
          return self.$import(file)}, TMP_12.$$s = self, TMP_12), $a).call($b)
          } else {
          imported_script = self.$source().$export(script);
          if ((($a = imported_script['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("Import not found: " + (script))};
          if ((($a = ($c = self.working_scripts['$include?'](imported_script)['$!'](), $c !== false && $c !== nil ?self.$imported_scripts()['$include?'](imported_script)['$!']() : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.working_scripts.$push(imported_script);
            self.$stage(imported_script.$read(), imported_script.$absolute());
            self.working_scripts.$pop();
            return self.$imported_scripts().$push(imported_script);
            } else {
            return nil
          };
        };
      };

      def.$on_player_update = TMP_13 = function() {
        var self = this, $iter = TMP_13.$$p, block = $iter || nil;

        TMP_13.$$p = null;
        return self.player_procs.$push(block);
      };

      self.$private();

      def.$process_input = function(player) {
        var $a, self = this, line = nil;

        line = player.$queue().$shift();
        if ((($a = line['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return player.$scene().$finish(player, line)
          } else {
          return nil
        };
      };

      def.$update_player = function(player) {
        var $a, $b, TMP_14, self = this;

        ($a = ($b = self.player_procs).$each, $a.$$p = (TMP_14 = function(proc){var self = TMP_14.$$s || this;
if (proc == null) proc = nil;
        return proc.$call(player)}, TMP_14.$$s = self, TMP_14), $a).call($b);
        if (player['$[]']("testing")['$=='](true)) {
          return self.$cue(player, "test")
          } else {
          return nil
        };
      };

      def.$rem_entity = function(entity) {
        var self = this;

        return self.entities.$delete(entity);
      };

      def.$recursive_update = function(entity) {
        var $a, $b, TMP_15, self = this;

        entity.$update();
        return ($a = ($b = entity.$children()).$each, $a.$$p = (TMP_15 = function(e){var self = TMP_15.$$s || this;
if (e == null) e = nil;
        return self.$recursive_update(e)}, TMP_15.$$s = self, TMP_15), $a).call($b);
      };

      def.$add_syntax = function(syntax) {
        var $a, $b, TMP_16, $c, TMP_17, self = this;

        if (self.commands['$[]'](syntax.$verb())['$=='](nil)) {
          self.$raise("Action \"" + (syntax.$verb()) + "\" does not exist.")};
        self.syntaxes = ($a = ($b = self.syntaxes).$delete_if, $a.$$p = (TMP_16 = function(existing){var self = TMP_16.$$s || this;
if (existing == null) existing = nil;
        return existing['$=='](syntax)}, TMP_16.$$s = self, TMP_16), $a).call($b);
        self.syntaxes.$unshift(syntax);
        return ($a = ($c = self.syntaxes)['$sort!'], $a.$$p = (TMP_17 = function(a, b){var self = TMP_17.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        if (a.$token_count()['$=='](b.$token_count())) {
            return b.$first_word()['$<=>'](a.$first_word())
            } else {
            return b.$token_count()['$<=>'](a.$token_count())
          }}, TMP_17.$$s = self, TMP_17), $a).call($c);
      };

      def.$add_action = function(action) {
        var $a, $b, TMP_18, $c, TMP_19, self = this, user_friendly = nil, args = nil, used_names = nil;

        if ((($a = (self.commands['$[]'](action.$command())['$=='](nil))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.commands['$[]='](action.$command(), $scope.get('Array').$new())};
        self.commands['$[]'](action.$command()).$unshift(action);
        ($a = ($b = self.commands['$[]'](action.$command()))['$sort!'], $a.$$p = (TMP_18 = function(a, b){var self = TMP_18.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        if (a.$specificity()['$=='](b.$specificity())) {
            return b.$order_key()['$<=>'](a.$order_key())
            } else {
            return b.$specificity()['$<=>'](a.$specificity())
          }}, TMP_18.$$s = self, TMP_18), $a).call($b);
        user_friendly = action.$command().$to_s().$gsub(/_/, " ");
        args = $scope.get('Array').$new();
        used_names = $scope.get('Array').$new();
        ($a = ($c = action.$queries()).$each, $a.$$p = (TMP_19 = function(c){var self = TMP_19.$$s || this, $a, $b, num = nil, new_name = nil;
if (c == null) c = nil;
        num = 1;
          new_name = ":var";
          while ((($b = used_names['$include?'](new_name)) !== nil && (!$b.$$is_boolean || $b == true))) {
          num = $rb_plus(num, 1);
          new_name = ":var" + (num);};
          used_names.$push(new_name);
          user_friendly = $rb_plus(user_friendly, " " + (new_name));
          return args.$push(new_name);}, TMP_19.$$s = self, TMP_19), $a).call($c);
        return $scope.get('Syntax').$new(self, user_friendly.$strip(), "" + (action.$command()) + " " + (args.$join(" ")));
      };

      def.$rem_action = function(action) {
        var self = this;

        return self.commands['$[]'](action.$command()).$delete(action);
      };

      def.$rem_syntax = function(syntax) {
        var self = this;

        return self.syntaxes.$delete(syntax);
      };

      return (def.$add_entity = function(entity) {
        var self = this;

        return self.entities.$push(entity);
      }, nil) && 'add_entity';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/engine"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$post_initialize', '$new', '$introduce', '$character', '$print', '$output', '$state', '$!', '$==', '$scene', '$turn', '$ready', '$key', '$select', '$stream', '$prompt', '$data', '$input', '$update', '$attr_reader', '$connect', '$clone', '$flush', '$gets', '$push', '$strip', '$shift', '$recv', '$queue']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Engine(){};
      var self = $Engine = $klass($base, $super, 'Engine', $Engine);

      var def = self.$$proto, $scope = self.$$scope;

      def.plot = def.user = nil;
      def.$initialize = function(plot) {
        var self = this;

        self.plot = plot;
        return self.$post_initialize();
      };

      def.$post_initialize = function() {
        var self = this;

        return self.user = $scope.get('User').$new(self.plot);
      };

      def.$run = function() {
        var $a, $b, self = this;

        self.plot.$introduce(self.user.$character());
        self.$print(self.user.$state().$output());
        while ((($b = self.user.$character().$scene().$state()['$==']("Concluded")['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
        self.$turn()};
        return self.$turn();
      };

      return (def.$turn = function() {
        var $a, self = this;

        self.plot.$ready();
        self.$print(self.user.$state().$output());
        if ((($a = self.user.$character().$scene().$key()['$==']("test")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.user.$character().$scene().$state()['$==']("Concluded")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.user.$stream().$select(self.user.$character().$scene().$data().$prompt());
            self.user.$state().$input();}};
        self.plot.$update();
        return self.$print(self.user.$state().$output());
      }, nil) && 'turn';
    })(self, null);

    (function($base, $super) {
      function $User(){};
      var self = $User = $klass($base, $super, 'User', $User);

      var def = self.$$proto, $scope = self.$$scope;

      def.plot = def.character = def.stream = def.state = nil;
      self.$attr_reader("state", "character", "story");

      def.$initialize = function(plot) {
        var self = this;

        self.plot = plot;
        self.character = $scope.get('Character').$new(self.plot, $hash2(["name", "synonyms", "proper_named"], {"name": "yourself", "synonyms": "self myself you me", "proper_named": true}));
        self.character.$connect(self);
        return self.$post_initialize();
      };

      def.$post_initialize = function() {
        var self = this;

        self.stream = $scope.get('UserStream').$new();
        return self.state = $scope.get('UserState').$new(self);
      };

      def.$stream = function() {
        var $a, self = this;

        return ((($a = self.stream) !== false && $a !== nil) ? $a : self.stream = $scope.get('UserStream').$new());
      };

      def.$state = function() {
        var $a, self = this;

        return ((($a = self.state) !== false && $a !== nil) ? $a : self.state = $scope.get('UserState').$new(self));
      };

      def['$state='] = function(state_class) {
        var self = this;

        return self.state = state_class.$new(self);
      };

      def.$refresh = function() {
        var self = this;

        return nil;
      };

      return (def.$quit = function() {
        var self = this;

        return nil;
      }, nil) && 'quit';
    })(self, null);

    (function($base, $super) {
      function $UserStream(){};
      var self = $UserStream = $klass($base, $super, 'UserStream', $UserStream);

      var def = self.$$proto, $scope = self.$$scope;

      def.buffer = def.queue = nil;
      def.$initialize = function() {
        var self = this;

        self.queue = $scope.get('Array').$new();
        return self.buffer = "";
      };

      def.$flush = function() {
        var self = this, tmp = nil;

        tmp = self.buffer.$clone();
        self.buffer = "";
        return tmp;
      };

      def.$send = function(data) {
        var self = this;

        return self.buffer = $rb_plus(self.buffer, data);
      };

      def.$select = function(prompt) {
        var self = this, line = nil;

        self.$print("" + (prompt) + " ");
        $scope.get('STDOUT').$flush();
        line = $scope.get('STDIN').$gets();
        return self.queue.$push(line.$strip());
      };

      return (def.$recv = function() {
        var self = this;

        return self.queue.$shift();
      }, nil) && 'recv';
    })(self, null);

    (function($base, $super) {
      function $UserState(){};
      var self = $UserState = $klass($base, $super, 'UserState', $UserState);

      var def = self.$$proto, $scope = self.$$scope;

      def.user = nil;
      self.$attr_reader("user");

      def.$initialize = function(user) {
        var self = this;

        return self.user = user;
      };

      def.$input = function() {
        var $a, self = this, line = nil;

        line = self.user.$stream().$recv();
        if ((($a = line['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.user.$character().$queue().$push(line)
          } else {
          return nil
        };
      };

      return (def.$output = function() {
        var self = this;

        return self.user.$stream().$flush();
      }, nil) && 'output';
    })(self, null);
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/direction"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$each', '$send', '$!', '$nil?', '$reverse', '$reverse=', '$adjective', '$adverb', '$[]', '$new']);
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Direction(){};
      var self = $Direction = $klass($base, $super, 'Direction', $Direction);

      var def = self.$$proto, $scope = self.$$scope;

      def.adjective = def.name = def.adverb = nil;
      self.$attr_accessor("name", "adjective", "adverb", "reverse");

      def.$initialize = function(args) {
        var $a, $b, TMP_1, $c, self = this, proper_named = nil;

        if (args == null) {
          args = $hash2([], {})
        }
        ($a = ($b = args).$each, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return self.$send("" + (key) + "=", value)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        if ((($a = self.$reverse()['$nil?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self]), $c = self.$reverse(), $c['$reverse='].apply($c, $a), $a[$a.length-1])};
        return proper_named = true;
      };

      def.$adjective = function() {
        var $a, self = this;

        return ((($a = self.adjective) !== false && $a !== nil) ? $a : self.name);
      };

      def.$adverb = function() {
        var $a, self = this;

        return ((($a = self.adverb) !== false && $a !== nil) ? $a : self.name);
      };

      def['$reverse='] = function(dir) {
        var self = this;

        return self.reverse = dir;
      };

      def.$synonyms = function() {
        var self = this;

        return "" + (self.$adjective()) + " " + (self.$adverb());
      };

      def.$to_s = function() {
        var self = this;

        return self.name;
      };

      return (Opal.defs(self, '$find', function(str) {
        var self = this, x = nil;

        x = $hash2(["north", "south", "west", "east", "up", "down", "northwest", "northeast", "southwest", "southeast"], {"north": $scope.get('NORTH'), "south": $scope.get('SOUTH'), "west": $scope.get('WEST'), "east": $scope.get('EAST'), "up": $scope.get('UP'), "down": $scope.get('DOWN'), "northwest": $scope.get('NORTHWEST'), "northeast": $scope.get('NORTHEAST'), "southwest": $scope.get('SOUTHWEST'), "southeast": $scope.get('SOUTHEAST')});
        return x['$[]'](str);
      }), nil) && 'find';
    })(self, null);

    Opal.cdecl($scope, 'NORTH', $scope.get('Direction').$new($hash2(["name", "adjective"], {"name": "north", "adjective": "northern"})));

    Opal.cdecl($scope, 'SOUTH', $scope.get('Direction').$new($hash2(["name", "adjective", "reverse"], {"name": "south", "adjective": "southern", "reverse": $scope.get('NORTH')})));

    Opal.cdecl($scope, 'WEST', $scope.get('Direction').$new($hash2(["name", "adjective"], {"name": "west", "adjective": "western"})));

    Opal.cdecl($scope, 'EAST', $scope.get('Direction').$new($hash2(["name", "adjective", "reverse"], {"name": "east", "adjective": "eastern", "reverse": $scope.get('WEST')})));

    Opal.cdecl($scope, 'NORTHWEST', $scope.get('Direction').$new($hash2(["name", "adjective"], {"name": "northwest", "adjective": "northwestern"})));

    Opal.cdecl($scope, 'SOUTHEAST', $scope.get('Direction').$new($hash2(["name", "adjective", "reverse"], {"name": "southeast", "adjective": "southeastern", "reverse": $scope.get('NORTHWEST')})));

    Opal.cdecl($scope, 'NORTHEAST', $scope.get('Direction').$new($hash2(["name", "adjective"], {"name": "northeast", "adjective": "northeastern"})));

    Opal.cdecl($scope, 'SOUTHWEST', $scope.get('Direction').$new($hash2(["name", "adjective", "reverse"], {"name": "southwest", "adjective": "southwestern", "reverse": $scope.get('NORTHEAST')})));

    Opal.cdecl($scope, 'UP', $scope.get('Direction').$new($hash2(["name", "adjective"], {"name": "up", "adjective": "upwards"})));

    Opal.cdecl($scope, 'DOWN', $scope.get('Direction').$new($hash2(["name", "adjective", "reverse"], {"name": "down", "adjective": "downwards", "reverse": $scope.get('UP')})));
  })(self)
};

/* Generated by Opal 0.8.1 */
Opal.modules["json"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var self = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            var arr = (options.array_class).$new();

            for (var i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            var hash = (options.object_class).$new();

            for (var k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            var klass;
            if ((klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.cget(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
      }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(self.$singleton_class());

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    });

    Opal.defs(self, '$parse', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$from_object($parse(source), options);
    });

    Opal.defs(self, '$parse!', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$parse(source, options);
    });

    Opal.defs(self, '$from_object', function(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.smap);
    });

    Opal.defs(self, '$generate', function(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return obj.$to_json(options);
    });

    Opal.defs(self, '$dump', function(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil
      }
      if (limit == null) {
        limit = nil
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    });
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_s().$to_json();
    }), nil) && 'to_json'
  })(self, null);
  (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_a().$to_json();
    })
  })(self);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      
      var inspect = [],
          keys = self.keys,
          _map = self.map,
          smap = self.smap,
          map, khash;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        if (key.$$is_string) {
          map = smap;
          khash = key;
        } else {
          map = _map;
          khash = key.$hash();
        }

        inspect.push((key).$to_s().$to_json() + ':' + (map[khash]).$to_json());
      }

      return '{' + inspect.join(', ') + '}';
    ;
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return "null";
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return self.toString();
    }, nil) && 'to_json'
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.defn(self, '$to_json', def.$inspect)
  })(self, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (def.$to_json = function() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }, nil) && 'to_json'
  })(self, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope;

    def.$to_json = function() {
      var self = this;

      return self.$to_s().$to_json();
    };

    return (def.$as_json = function() {
      var self = this;

      return self.$to_s();
    }, nil) && 'as_json';
  })(self, null);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic/snapshots"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_accessor', '$each', '$to_s', '$end_with?', '$[]', '$==', '$respond_to?', '$send', '$[]=', '$serialize_obj', '$serialized_attributes', '$each_pair', '$session', '$push', '$length', '$shift', '$generate', '$parse', '$!', '$unserialize', '$to_sym', '$private', '$nil?', '$kind_of?', '$can_serialize?', '$each_index', '$raise', '$index', '$name', '$match', '$to_i', '$find']);
  self.$require("json");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Snapshots(){};
      var self = $Snapshots = $klass($base, $super, 'Snapshots', $Snapshots);

      var def = self.$$proto, $scope = self.$$scope;

      def.history = def.entities = nil;
      self.$attr_accessor("history");

      def.$initialize = function(entities) {
        var self = this;

        self.history = [];
        return self.entities = entities;
      };

      def.$save = function(entities) {
        var $a, $b, TMP_1, self = this, store = nil, index = nil, json = nil;

        store = [];
        index = 0;
        ($a = ($b = entities).$each, $a.$$p = (TMP_1 = function(e){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, hash = nil;
if (e == null) e = nil;
        hash = $hash2([], {});
          ($a = ($b = e.$serialized_attributes()).$each, $a.$$p = (TMP_2 = function(m){var self = TMP_2.$$s || this, $a, con = nil, xxx = nil, error = nil;
if (m == null) m = nil;
          con = m.$to_s();
            if ((($a = con['$end_with?']("?")) !== nil && (!$a.$$is_boolean || $a == true))) {
              con = con['$[]']($range(0, -2, false))};
            if (e['$respond_to?'](m)['$=='](true)) {
              try {
              xxx = e.$send(m);
                if (xxx['$=='](false)) {
                  return hash['$[]='](con, false)
                } else if (xxx !== false && xxx !== nil) {
                  return hash['$[]='](con, self.$serialize_obj(xxx))
                  } else {
                  return hash['$[]='](con, nil)
                };
              } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {error = $err;
                return hash['$[]='](con, nil)
                }else { throw $err; }
              }
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2), $a).call($b);
          hash['$[]=']("session", $hash2([], {}));
          ($a = ($c = e.$session()).$each_pair, $a.$$p = (TMP_3 = function(k, v){var self = TMP_3.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return hash['$[]']("session")['$[]='](k, self.$serialize_obj(v))}, TMP_3.$$s = self, TMP_3), $a).call($c);
          store.$push(hash);
          return index = $rb_plus(index, 1);}, TMP_1.$$s = self, TMP_1), $a).call($b);
        if ($rb_gt(self.history.$length(), 10)) {
          self.history.$shift()};
        json = $scope.get('JSON').$generate(store);
        return json;
      };

      def.$restore = function(snapshot) {
        var $a, $b, TMP_4, self = this, data = nil, index = nil;

        data = $scope.get('JSON').$parse(snapshot);
        index = 0;
        return ($a = ($b = data).$each, $a.$$p = (TMP_4 = function(hash){var self = TMP_4.$$s || this, $a, $b, TMP_5, $c, TMP_6;
if (hash == null) hash = nil;
        ($a = ($b = hash).$each_pair, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this, $a;
            if (self.entities == null) self.entities = nil;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($a = k.$to_s()['$==']("session")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.entities['$[]'](index).$send("" + (k) + "=", self.$unserialize(v))
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5), $a).call($b);
          ($a = ($c = hash['$[]']("session")).$each_pair, $a.$$p = (TMP_6 = function(k, v){var self = TMP_6.$$s || this;
            if (self.entities == null) self.entities = nil;
if (k == null) k = nil;if (v == null) v = nil;
          return self.entities['$[]'](index).$session()['$[]='](k.$to_sym(), self.$unserialize(v))}, TMP_6.$$s = self, TMP_6), $a).call($c);
          return index = $rb_plus(index, 1);}, TMP_4.$$s = self, TMP_4), $a).call($b);
      };

      def.$blacklist = function() {
        var self = this;

        return ["children", "session", "scene", "object_of_pronoun", "test_queue", "test_queue_scene", "test_queue_length", "testing"];
      };

      self.$private();

      def['$can_serialize?'] = function(obj) {try {

        var $a, $b, $c, TMP_7, self = this, allowed = nil;

        if ((($a = (((($b = ((($c = obj['$=='](true)) !== false && $c !== nil) ? $c : obj['$=='](false))) !== false && $b !== nil) ? $b : obj['$nil?']()))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        allowed = [$scope.get('String'), $scope.get('Fixnum'), $scope.get('Float'), $scope.get('Numeric'), $scope.get('Entity'), $scope.get('Direction'), $scope.get('Hash'), $scope.get('Array'), $scope.get('Symbol')];
        ($a = ($b = allowed).$each, $a.$$p = (TMP_7 = function(a){var self = TMP_7.$$s || this, $a;
if (a == null) a = nil;
        if ((($a = obj['$kind_of?'](a)) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_7.$$s = self, TMP_7), $a).call($b);
        return false;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$serialize_obj = function(obj) {
        var $a, $b, TMP_8, $c, TMP_9, self = this, hash = nil, arr = nil;

        if ((($a = obj['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if (obj['$=='](false)) {
          return false};
        if ((($a = obj['$kind_of?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          hash = $hash2([], {});
          ($a = ($b = obj).$each_pair, $a.$$p = (TMP_8 = function(k, v){var self = TMP_8.$$s || this, $a, $b;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($a = ($b = self['$can_serialize?'](k), $b !== false && $b !== nil ?self['$can_serialize?'](v) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return hash['$[]='](self.$serialize_obj(k), self.$serialize_obj(v))
              } else {
              return nil
            }}, TMP_8.$$s = self, TMP_8), $a).call($b);
          return hash;
        } else if ((($a = obj['$kind_of?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          arr = [];
          ($a = ($c = obj).$each_index, $a.$$p = (TMP_9 = function(i){var self = TMP_9.$$s || this, $a;
if (i == null) i = nil;
          if ((($a = self['$can_serialize?'](obj['$[]'](i))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return arr['$[]='](i, self.$serialize_obj(obj['$[]'](i)))
              } else {
              return self.$raise("Bad array in snapshot")
            }}, TMP_9.$$s = self, TMP_9), $a).call($c);
          return arr;
        } else if ((($a = obj['$kind_of?']($scope.get('Entity'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "#<EIN_" + (self.entities.$index(obj)) + ">"
        } else if ((($a = obj['$kind_of?']($scope.get('Direction'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "#<DIR_" + (obj.$name()) + ">"};
        return obj;
      };

      return (def.$unserialize = function(obj) {
        var $a, $b, TMP_10, $c, TMP_11, self = this, hash = nil, arr = nil, i = nil;

        if ((($a = obj['$kind_of?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          hash = $hash2([], {});
          ($a = ($b = obj).$each_pair, $a.$$p = (TMP_10 = function(k, v){var self = TMP_10.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return hash['$[]='](self.$unserialize(k), self.$unserialize(v))}, TMP_10.$$s = self, TMP_10), $a).call($b);
          return hash;
        } else if ((($a = obj['$kind_of?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          arr = [];
          ($a = ($c = obj).$each_index, $a.$$p = (TMP_11 = function(i){var self = TMP_11.$$s || this;
if (i == null) i = nil;
          return arr['$[]='](i, self.$unserialize(obj['$[]'](i)))}, TMP_11.$$s = self, TMP_11), $a).call($c);
          return arr;
        } else if ((($a = obj.$to_s().$match(/^#<EIN_[0-9]+>$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          i = obj['$[]']($range(6, -2, false)).$to_i();
          return self.entities['$[]'](i);
        } else if ((($a = obj.$to_s().$match(/^#<DIR_[a-z]+>$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Direction').$find(obj['$[]']($range(6, -2, false)))
          } else {
          return obj
        };
      }, nil) && 'unserialize';
    })(self, null)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["gamefic"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("gamefic/core_ext/array");
  self.$require("gamefic/core_ext/string");
  self.$require("gamefic/grammar");
  self.$require("gamefic/keywords");
  self.$require("gamefic/serialized");
  self.$require("gamefic/entity");
  self.$require("gamefic/character");
  self.$require("gamefic/scene");
  self.$require("gamefic/scene/active");
  self.$require("gamefic/scene/concluded");
  self.$require("gamefic/scene/paused");
  self.$require("gamefic/scene/multiplechoice");
  self.$require("gamefic/scene/yesorno");
  self.$require("gamefic/query");
  self.$require("gamefic/action");
  self.$require("gamefic/syntax");
  self.$require("gamefic/rule");
  self.$require("gamefic/director");
  self.$require("gamefic/plot");
  self.$require("gamefic/engine");
  self.$require("gamefic/direction");
  return self.$require("gamefic/snapshots");
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/use"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Use');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$children', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Children'))).$new.apply($a, [].concat(args));
      });

      Opal.defs(self, '$family', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Family'))).$new.apply($a, [].concat(args));
      });

      Opal.defs(self, '$parent', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Parent'))).$new.apply($a, [].concat(args));
      });

      Opal.defs(self, '$siblings', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Siblings'))).$new.apply($a, [].concat(args));
      });

      Opal.defs(self, '$text', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Text'))).$new.apply($a, [].concat(args));
      });

      Opal.defs(self, '$many_children', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('ManyChildren'))).$new.apply($a, [].concat(args));
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/attachable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$nil?']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Attachable');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$attached?', function() {
        var $a, self = this;
        if (self.attached == null) self.attached = nil;

        if ((($a = self.attached['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.attached = false};
        return self.attached;
      });

      Opal.defn(self, '$attached=', function(bool) {
        var self = this;

        return self.attached = bool;
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/auto_takes"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$==', '$parent', '$enabled?', '$!', '$to_s', '$taking_message', '$tell', '$%', '$definitely', '$cap_first', '$quietly', '$taken_message', '$untaken_message', '$nil?']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'AutoTakes');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$auto_takes?', function(entity) {
        var $a, self = this, buff = nil;

        if (entity.$parent()['$=='](self)) {
          return true};
        if ((($a = $scope.get('AutoTakes')['$enabled?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('AutoTakes').$taking_message().$to_s()['$==']("")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$tell($scope.get('AutoTakes').$taking_message()['$%']($hash2(["name", "Name"], {"name": entity.$definitely(), "Name": entity.$definitely().$cap_first()})))};
          buff = self.$quietly("take", entity);
          if ((($a = entity.$parent()['$=='](self)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$tell(buff);
            return false;
            } else {
            if ((($a = $scope.get('AutoTakes').$taken_message().$to_s()['$==']("")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$tell($scope.get('AutoTakes').$taken_message()['$%']($hash2(["name", "Name"], {"name": entity.$definitely(), "Name": entity.$definitely().$cap_first()})))};
            return true;
          };
          } else {
          self.$tell($scope.get('AutoTakes').$untaken_message()['$%']($hash2(["name", "Name"], {"name": entity.$definitely(), "Name": entity.$definitely().$cap_first()})));
          return false;
        };
      });

      Opal.defs(self, '$enabled?', function() {
        var $a, self = this;
        if (self.enabled == null) self.enabled = nil;

        if ((($a = self.enabled['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.enabled = true};
        return self.enabled;
      });

      Opal.defs(self, '$enabled=', function(bool) {
        var self = this;

        return self.enabled = bool;
      });

      Opal.defs(self, '$taking_message', function() {
        var $a, self = this;
        if (self.taking_message == null) self.taking_message = nil;

        return ((($a = self.taking_message) !== false && $a !== nil) ? $a : self.taking_message = "");
      });

      Opal.defs(self, '$taking_message=', function(text) {
        var self = this;

        return self.taking_message = text;
      });

      Opal.defs(self, '$taken_message', function() {
        var $a, self = this;
        if (self.taken_message == null) self.taken_message = nil;

        return ((($a = self.taken_message) !== false && $a !== nil) ? $a : self.taken_message = "");
      });

      Opal.defs(self, '$taken_message=', function(text) {
        var self = this;

        return self.taken_message = text;
      });

      Opal.defs(self, '$untaken_message', function() {
        var $a, self = this;
        if (self.untaken_message == null) self.untaken_message = nil;

        return ((($a = self.untaken_message) !== false && $a !== nil) ? $a : self.untaken_message = "You don't have %{name}.");
      });

      Opal.defs(self, '$untaken_message=', function(text) {
        var self = this;

        return self.untaken_message = text;
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/darkenable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Darkenable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("dark");

      Opal.defn(self, '$dark?', function() {
        var $a, self = this;
        if (self.dark == null) self.dark = nil;

        return ((($a = self.dark) !== false && $a !== nil) ? $a : self.dark = false);
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/enterable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Enterable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("enterable");

      Opal.defn(self, '$enterable?', function() {
        var $a, self = this;
        if (self.enterable == null) self.enterable = nil;

        return ((($a = self.enterable) !== false && $a !== nil) ? $a : self.enterable = false);
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/explicit_exits"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer', '$default', '$nil?']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ExplicitExits');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("explicit_exits");

      Opal.defn(self, '$explicit_exits?', function() {
        var $a, self = this;
        if (self.explicit_exits == null) self.explicit_exits = nil;

        return ((($a = self.explicit_exits) !== false && $a !== nil) ? $a : self.explicit_exits = $scope.get('ExplicitExits').$default());
      });

      Opal.defs(self, '$default', function() {
        var $a, self = this;
        if (self["default"] == null) self["default"] = nil;

        if ((($a = self["default"]['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["default"] = true};
        return self["default"];
      });

      Opal.defs(self, '$default=', function(bool) {
        var self = this;

        return self["default"] = bool;
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/itemizable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer', '$nil?', '$default']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Itemizable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("itemized");

      Opal.defn(self, '$itemized?', function() {
        var $a, self = this;
        if (self.itemized == null) self.itemized = nil;

        if ((($a = self.itemized['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.itemized = $scope.get('Itemizable').$default()};
        return self.itemized;
      });

      Opal.defs(self, '$default', function() {
        var $a, self = this;
        if (self["default"] == null) self["default"] = nil;

        if ((($a = self["default"]['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["default"] = true};
        return self["default"];
      });

      Opal.defs(self, '$default=', function(bool) {
        var self = this;

        return self["default"] = bool;
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/openable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer', '$!', '$open?']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Openable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("open", "openable");

      Opal.defn(self, '$open?', function() {
        var $a, self = this;
        if (self.open == null) self.open = nil;

        return ((($a = self.open) !== false && $a !== nil) ? $a : self.open = false);
      });

      Opal.defn(self, '$closed?', function() {
        var self = this;

        return self['$open?']()['$!']();
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/lockable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$==', '$open=', '$!', '$nil?']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/modules/openable");

    (function($base) {
      var self = $module($base, 'Lockable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Openable'));

      self.$attr_reader("lock_key");

      Opal.defn(self, '$locked=', function(bool) {
        var $a, $b, self = this;
        if (self.locked == null) self.locked = nil;

        self.locked = bool;
        if (self.locked['$=='](true)) {
          return (($a = [false]), $b = self, $b['$open='].apply($b, $a), $a[$a.length-1])
          } else {
          return nil
        };
      });

      Opal.defn(self, '$open=', function(bool) {
        var self = this;
        if (self.open == null) self.open = nil;

        self.open = bool;
        if (self.open['$=='](true)) {
          return self.locked = false
          } else {
          return nil
        };
      });

      Opal.defn(self, '$locked?', function() {
        var $a, self = this;
        if (self.locked == null) self.locked = nil;

        return ((($a = self.locked) !== false && $a !== nil) ? $a : self.locked = false);
      });

      Opal.defn(self, '$has_lock_key?', function() {
        var self = this;
        if (self.lock_key == null) self.lock_key = nil;

        return self.lock_key['$nil?']()['$!']();
      });

      Opal.defn(self, '$lock_key=', function(entity) {
        var self = this;

        return self.lock_key = entity;
      });
    })($scope.get('Gamefic'));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/parent-room"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$parent', '$!', '$kind_of?', '$nil?']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'ParentRoom');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$room', function() {
        var $a, $b, $c, self = this, p = nil;

        p = self.$parent();
        while ((($b = ($c = p['$kind_of?']($scope.get('Room'))['$!'](), $c !== false && $c !== nil ?p['$nil?']()['$!']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
        p = p.$parent()};
        return p;
      })
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/portable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Portable');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("portable");

      Opal.defn(self, '$portable?', function() {
        var $a, self = this;
        if (self.portable == null) self.portable = nil;

        return ((($a = self.portable) !== false && $a !== nil) ? $a : self.portable = false);
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules/transparent"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_writer']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Transparent');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_writer("transparent");

      Opal.defn(self, '$transparent?', function() {
        var $a, self = this;
        if (self.transparent == null) self.transparent = nil;

        return ((($a = self.transparent) !== false && $a !== nil) ? $a : self.transparent = false);
      });
    })($scope.get('Gamefic'))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/modules"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/modules/attachable");

    self.$require("standard/modules/auto_takes");

    self.$require("standard/modules/darkenable");

    self.$require("standard/modules/enterable");

    self.$require("standard/modules/explicit_exits");

    self.$require("standard/modules/itemizable");

    self.$require("standard/modules/lockable");

    self.$require("standard/modules/openable");

    self.$require("standard/modules/parent-room");

    self.$require("standard/modules/portable");

    self.$require("standard/modules/transparent");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/entity"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_writer', '$serialize']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Entity(){};
      var self = $Entity = $klass($base, $super, 'Entity', $Entity);

      var def = self.$$proto, $scope = self.$$scope;

      def.locale_description = nil;
      self.$include($scope.get('Portable'));

      self.$include($scope.get('Itemizable'));

      self.$include($scope.get('ParentRoom'));

      self.$include($scope.get('Attachable'));

      self.$attr_writer("locale_description");

      self.$serialize("locale_description", "portable?", "itemized?", "attached?");

      return (def.$locale_description = function() {
        var $a, self = this;

        return ((($a = self.locale_description) !== false && $a !== nil) ? $a : self.locale_description = "");
      }, nil) && 'locale_description';
    })($scope.get('Gamefic'), null)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/thing"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Thing(){};
      var self = $Thing = $klass($base, $super, 'Thing', $Thing);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Entity')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/character"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$serialize']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Character(){};
      var self = $Character = $klass($base, $super, 'Character', $Character);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('ParentRoom'));

      self.$include($scope.get('Attachable'));

      self.$include($scope.get('Itemizable'));

      self.$include($scope.get('AutoTakes'));

      return self.$serialize("attached?", "itemized?");
    })($scope.get('Gamefic'), null)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/receptacle"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$serialize']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Receptacle(){};
      var self = $Receptacle = $klass($base, $super, 'Receptacle', $Receptacle);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Enterable'));

      return self.$serialize("enterable?");
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Entity')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/container"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$serialize']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/entities/receptacle");

    (function($base, $super) {
      function $Container(){};
      var self = $Container = $klass($base, $super, 'Container', $Container);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Enterable'));

      self.$include($scope.get('Openable'));

      self.$include($scope.get('Lockable'));

      self.$include($scope.get('Transparent'));

      return self.$serialize("enterable?", "open?", "locked?", "lock_key", "transparent?");
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Receptacle')));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/portal"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$serialize', '$nil?', '$destination', '$reverse', '$direction', '$!', '$==', '$each', '$that_are', '$children', '$new', '$name', '$synonyms']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Portal(){};
      var self = $Portal = $klass($base, $super, 'Portal', $Portal);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      def.direction = def.name = nil;
      self.$attr_accessor("destination", "direction");

      self.$serialize("destination", "direction");

      def.$find_reverse = function() {try {

        var $a, $b, TMP_1, self = this, rev = nil;

        if ((($a = self.$destination()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        rev = self.$direction().$reverse();
        if ((($a = rev['$=='](nil)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self.$destination().$children().$that_are($scope.get('Portal'))).$each, $a.$$p = (TMP_1 = function(c){var self = TMP_1.$$s || this;
if (c == null) c = nil;
          if (c.$direction()['$=='](rev)) {
              Opal.ret(c)
              } else {
              return nil
            }}, TMP_1.$$s = self, TMP_1), $a).call($b)};
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      };

      def.$direction = function() {
        var $a, self = this;

        return ((($a = self.direction) !== false && $a !== nil) ? $a : self.direction = $scope.get('Direction').$new($hash2(["name"], {"name": self.name})));
      };

      def.$name = function() {
        var $a, self = this;

        return ((($a = self.name) !== false && $a !== nil) ? $a : self.$direction().$name());
      };

      return (def.$synonyms = TMP_2 = function() {var $zuper = $slice.call(arguments, 0);
        var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        TMP_2.$$p = null;
        return "" + (Opal.find_super_dispatcher(self, 'synonyms', TMP_2, $iter).apply(self, $zuper)) + " " + (self.direction) + " " + (self.$direction().$synonyms());
      }, nil) && 'synonyms';
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Entity')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/door"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$serialize', '$nil?', '$!', '$reverse', '$name=', '$adjective', '$find_reverse', '$==', '$open?', '$open=', '$locked?', '$locked=', '$automatic?', '$automatic=', '$lock_key', '$lock_key=']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/entities/portal");

    (function($base, $super) {
      function $Door(){};
      var self = $Door = $klass($base, $super, 'Door', $Door);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.name = def.direction = def.lock_key = def.automatic = nil;
      self.$include($scope.get('Openable'));

      self.$include($scope.get('Lockable'));

      self.$serialize("open?", "locked?", "lock_key", "automatic?");

      def.$post_initialize = TMP_1 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, proper_named = nil, rev = nil;

        TMP_1.$$p = null;
        Opal.find_super_dispatcher(self, 'post_initialize', TMP_1, $iter).apply(self, $zuper);
        if ((($a = ($b = self.name['$nil?'](), $b !== false && $b !== nil ?self.direction['$nil?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          proper_named = false;
          rev = self.direction.$reverse();
          return (($a = ["the " + (self.direction.$adjective()) + " door"]), $b = self, $b['$name='].apply($b, $a), $a[$a.length-1]);
          } else {
          return nil
        };
      };

      def['$open='] = TMP_2 = function(bool) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, rev = nil;

        TMP_2.$$p = null;
        Opal.find_super_dispatcher(self, 'open=', TMP_2, $iter).apply(self, $zuper);
        rev = self.$find_reverse();
        if ((($a = ($b = rev['$nil?']()['$!'](), $b !== false && $b !== nil ?rev['$open?']()['$=='](bool)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($a = [bool]), $b = rev, $b['$open='].apply($b, $a), $a[$a.length-1])
          } else {
          return nil
        };
      };

      def['$locked='] = TMP_3 = function(bool) {var $zuper = $slice.call(arguments, 0);
        var $a, $b, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, rev = nil;

        TMP_3.$$p = null;
        Opal.find_super_dispatcher(self, 'locked=', TMP_3, $iter).apply(self, $zuper);
        rev = self.$find_reverse();
        if ((($a = ($b = rev['$nil?']()['$!'](), $b !== false && $b !== nil ?rev['$locked?']()['$=='](bool)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($a = [bool]), $b = rev, $b['$locked='].apply($b, $a), $a[$a.length-1])
          } else {
          return nil
        };
      };

      def['$automatic='] = function(bool) {
        var $a, $b, self = this, rev = nil;

        self.automatic = bool;
        rev = self.$find_reverse();
        if ((($a = ($b = rev['$nil?']()['$!'](), $b !== false && $b !== nil ?rev['$automatic?']()['$=='](bool)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($a = [bool]), $b = rev, $b['$automatic='].apply($b, $a), $a[$a.length-1])
          } else {
          return nil
        };
      };

      def.$lock_key = function() {
        var self = this;

        return self.lock_key;
      };

      def['$lock_key='] = function(entity) {
        var $a, $b, self = this, rev = nil;

        self.lock_key = entity;
        rev = self.$find_reverse();
        if ((($a = ($b = rev['$nil?']()['$!'](), $b !== false && $b !== nil ?rev.$lock_key()['$=='](entity)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($a = [entity]), $b = rev, $b['$lock_key='].apply($b, $a), $a[$a.length-1])
          } else {
          return nil
        };
      };

      return (def['$automatic?'] = function() {
        var $a, self = this;

        return ((($a = self.automatic) !== false && $a !== nil) ? $a : self.automatic = true);
      }, nil) && 'automatic?';
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Portal')));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/fixture"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Fixture(){};
      var self = $Fixture = $klass($base, $super, 'Fixture', $Fixture);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Thing')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/item"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$portable=']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Item(){};
      var self = $Item = $klass($base, $super, 'Item', $Item);

      var def = self.$$proto, $scope = self.$$scope;

      return (def.$pre_initialize = function() {
        var $a, $b, self = this;

        return (($a = [true]), $b = self, $b['$portable='].apply($b, $a), $a[$a.length-1]);
      }, nil) && 'pre_initialize'
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Thing')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/room"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$serialize', '$kind_of?', '$find', '$new', '$plot', '$==', '$proper_named=', '$reverse', '$raise', '$cap_first', '$name', '$to_s', '$each', '$tell', '$children', '$delete_if', '$!', '$direction', '$that_are', '$[]']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Room(){};
      var self = $Room = $klass($base, $super, 'Room', $Room);

      var def = self.$$proto, $scope = self.$$scope;

      def.synonyms = nil;
      self.$include($scope.get('Darkenable'));

      self.$include($scope.get('ExplicitExits'));

      self.$serialize("dark?", "explicit_exits?");

      def.$connect = function(destination, direction, type, two_way) {
        var $a, $b, self = this, portal = nil, reverse = nil, portal2 = nil;

        if (type == null) {
          type = $scope.get('Portal')
        }
        if (two_way == null) {
          two_way = true
        }
        if ((($a = direction['$kind_of?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          direction = $scope.get('Direction').$find(direction)};
        portal = type.$new(self.$plot(), $hash2(["direction", "parent", "destination"], {"direction": direction, "parent": self, "destination": destination}));
        if (type['$==']($scope.get('Portal'))) {
          (($a = [true]), $b = portal, $b['$proper_named='].apply($b, $a), $a[$a.length-1])};
        if (two_way['$=='](true)) {
          reverse = direction.$reverse();
          if (reverse['$=='](nil)) {
            self.$raise("" + (direction.$name().$cap_first()) + " does not have an opposite direction")};
          portal2 = type.$new(self.$plot(), $hash2(["direction", "parent", "destination"], {"direction": reverse, "parent": destination, "destination": self}));
          if (type['$==']($scope.get('Portal'))) {
            (($a = [true]), $b = portal2, $b['$proper_named='].apply($b, $a), $a[$a.length-1])};};
        return portal;
      };

      def.$synonyms = function() {
        var self = this;

        return $rb_plus(self.synonyms.$to_s(), " around here room");
      };

      def.$tell = function(message) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(c){var self = TMP_1.$$s || this;
if (c == null) c = nil;
        return c.$tell(message)}, TMP_1.$$s = self, TMP_1), $a).call($b);
      };

      return (def.$find_portal = function(direction) {
        var $a, $b, TMP_2, self = this, d = nil, portals = nil;

        d = direction.$to_s();
        portals = ($a = ($b = self.$children().$that_are($scope.get('Portal'))).$delete_if, $a.$$p = (TMP_2 = function(p){var self = TMP_2.$$s || this;
if (p == null) p = nil;
        return p.$direction().$to_s()['$=='](d)['$!']()}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return portals['$[]'](0);
      }, nil) && 'find_portal';
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Entity')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/scenery"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$itemized=']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Scenery(){};
      var self = $Scenery = $klass($base, $super, 'Scenery', $Scenery);

      var def = self.$$proto, $scope = self.$$scope;

      return (def.$pre_initialize = function() {
        var $a, $b, self = this;

        return (($a = [false]), $b = self, $b['$itemized='].apply($b, $a), $a[$a.length-1]);
      }, nil) && 'pre_initialize'
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Thing')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/rubble"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/entities/scenery");

    (function($base, $super) {
      function $Rubble(){};
      var self = $Rubble = $klass($base, $super, 'Rubble', $Rubble);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Scenery')));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities/supporter"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$serialize']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Supporter(){};
      var self = $Supporter = $klass($base, $super, 'Supporter', $Supporter);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Enterable'));

      return self.$serialize("enterable?");
    })($scope.get('Gamefic'), (($scope.get('Gamefic')).$$scope.get('Thing')))
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/entities"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/entities/entity");

    self.$require("standard/entities/thing");

    self.$require("standard/entities/character");

    self.$require("standard/entities/container");

    self.$require("standard/entities/door");

    self.$require("standard/entities/fixture");

    self.$require("standard/entities/item");

    self.$require("standard/entities/portal");

    self.$require("standard/entities/receptacle");

    self.$require("standard/entities/room");

    self.$require("standard/entities/scenery");

    self.$require("standard/entities/rubble");

    self.$require("standard/entities/supporter");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/queries/visible"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$children', '$room', '$uniq!', '$each', '$kind_of?', '$open?', '$transparent?', '$that_are_not', '$push', '$that_are', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Query');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Visible(){};
        var self = $Visible = $klass($base, $super, 'Visible', $Visible);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.$base_specificity = function() {
          var self = this;

          return 40;
        };

        return (def.$context_from = TMP_1 = function(subject) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, array = nil;

          TMP_1.$$p = null;
          array = Opal.find_super_dispatcher(self, 'context_from', TMP_1, $iter).apply(self, $zuper);
          array = $rb_plus(array, subject.$room().$children());
          array['$uniq!']();
          ($a = ($b = array).$each, $a.$$p = (TMP_2 = function(thing){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (thing == null) thing = nil;
          if ((($a = thing['$kind_of?']($scope.get('Container'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ((($b = thing['$open?']()) !== false && $b !== nil) ? $b : thing['$transparent?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
                array = $rb_plus(array, thing.$children().$that_are_not("attached?"))}
            } else if ((($a = ((($b = thing['$kind_of?']($scope.get('Supporter'))) !== false && $b !== nil) ? $b : thing['$kind_of?']($scope.get('Receptacle')))) !== nil && (!$a.$$is_boolean || $a == true))) {
              array = $rb_plus(array, thing.$children().$that_are_not("attached?"))};
            return ($a = ($b = thing.$children().$that_are("attached?")).$each, $a.$$p = (TMP_3 = function(att){var self = TMP_3.$$s || this, $a, $b, $c, $d;
if (att == null) att = nil;
            array.$push(att);
              if ((($a = ((($b = att['$kind_of?']($scope.get('Supporter'))) !== false && $b !== nil) ? $b : (($c = att['$kind_of?']($scope.get('Container')), $c !== false && $c !== nil ?(((($d = att['$open?']()) !== false && $d !== nil) ? $d : att['$transparent?']())) : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return array = $rb_plus(array, att.$children().$that_are_not("attached?"))
                } else {
                return nil
              };}, TMP_3.$$s = self, TMP_3), $a).call($b);}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return $rb_minus(array, [subject]);
        }, nil) && 'context_from';
      })(self, $scope.get('Family'))
    })($scope.get('Gamefic'));

    (function($base) {
      var self = $module($base, 'Use');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$visible', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Visible'))).$new.apply($a, [].concat(args));
      })
    })($scope.get('Gamefic'));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/queries/many_visible"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/queries/visible");

    (function($base, $super) {
      function $ManyVisible(){};
      var self = $ManyVisible = $klass($base, $super, 'ManyVisible', $ManyVisible);

      var def = self.$$proto, $scope = self.$$scope;

      return (def['$allow_many?'] = function() {
        var self = this;

        return true;
      }, nil) && 'allow_many?'
    })((($scope.get('Gamefic')).$$scope.get('Query')), (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Visible')));

    (function($base) {
      var self = $module($base, 'Use');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$many_visible', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('ManyVisible'))).$new.apply($a, [].concat(args));
      })
    })($scope.get('Gamefic'));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/queries/reachable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$kind_of?', '$parent', '$push', '$!', '$==', '$room', '$children', '$each', '$open?', '$that_are_not', '$that_are', '$uniq', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Query');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Reachable(){};
        var self = $Reachable = $klass($base, $super, 'Reachable', $Reachable);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (def.$context_from = TMP_1 = function(subject) {var $zuper = $slice.call(arguments, 0);
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, array = nil;

          TMP_1.$$p = null;
          array = Opal.find_super_dispatcher(self, 'context_from', TMP_1, $iter).apply(self, $zuper);
          if ((($a = ((($b = subject.$parent()['$kind_of?']($scope.get('Container'))) !== false && $b !== nil) ? $b : subject.$parent()['$kind_of?']($scope.get('Supporter')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            array.$push(subject.$parent())};
          if ((($a = subject.$parent()['$=='](subject.$room())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            array = $rb_plus(array, subject.$room().$children())};
          ($a = ($b = array).$each, $a.$$p = (TMP_2 = function(thing){var self = TMP_2.$$s || this, $a, $b, $c, TMP_3;
if (thing == null) thing = nil;
          if ((($a = thing['$kind_of?']($scope.get('Container'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = thing['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                array = $rb_plus(array, thing.$children().$that_are_not("attached?"))}
            } else if ((($a = ((($b = ((($c = thing['$kind_of?']($scope.get('Supporter'))) !== false && $c !== nil) ? $c : thing['$kind_of?']($scope.get('Receptacle')))) !== false && $b !== nil) ? $b : thing['$=='](subject))) !== nil && (!$a.$$is_boolean || $a == true))) {
              array = $rb_plus(array, thing.$children().$that_are_not("attached?"))};
            return ($a = ($b = thing.$children().$that_are("attached?")).$each, $a.$$p = (TMP_3 = function(att){var self = TMP_3.$$s || this, $a, $b, $c;
if (att == null) att = nil;
            array.$push(att);
              if ((($a = ((($b = att['$kind_of?']($scope.get('Supporter'))) !== false && $b !== nil) ? $b : (($c = att['$kind_of?']($scope.get('Container')), $c !== false && $c !== nil ?att['$open?']() : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return array = $rb_plus(array, att.$children())
                } else {
                return nil
              };}, TMP_3.$$s = self, TMP_3), $a).call($b);}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return $rb_minus(array.$uniq(), [subject]);
        }, nil) && 'context_from'
      })(self, $scope.get('Family'))
    })($scope.get('Gamefic'));

    (function($base) {
      var self = $module($base, 'Use');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$reachable', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Reachable'))).$new.apply($a, [].concat(args));
      })
    })($scope.get('Gamefic'));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/queries/room"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$room', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var self = $module($base, 'Query');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Room(){};
        var self = $Room = $klass($base, $super, 'Room', $Room);

        var def = self.$$proto, $scope = self.$$scope;

        return (def.$context_from = function(subject) {
          var self = this;

          return [subject.$room()];
        }, nil) && 'context_from'
      })(self, $scope.get('Parent'))
    })($scope.get('Gamefic'));

    (function($base) {
      var self = $module($base, 'Use');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$room', function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        return ($a = (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Room'))).$new.apply($a, [].concat(args));
      })
    })($scope.get('Gamefic'));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/queries"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/queries/many_visible");

    self.$require("standard/queries/reachable");

    self.$require("standard/queries/room");

    self.$require("standard/queries/visible");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/close"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$new', '$the', '$!', '$open?', '$open=']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, string){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (string == null) string = nil;
    return actor.$tell("You don't see any \"" + (string) + "\" here.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "close", (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You can't close " + (self.$the(thing)) + ".")}, TMP_2.$$s = self, TMP_2), $a).call($c, "close", (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, container){var self = TMP_3.$$s || this, $a, $b;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = container['$open?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("It's already closed.")
        } else {
        actor.$tell("You close " + (self.$the(container)) + ".");
        return (($a = [false]), $b = container, $b['$open='].apply($b, $a), $a[$a.length-1]);
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "close", (($scope.get('Query')).$$scope.get('Reachable')).$new((($scope.get('Gamefic')).$$scope.get('Openable'))));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/drop"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$the', '$new', '$parent=', '$parent', '$each', '$perform', '$many_visible', '$that_are_not', '$children', '$==', '$length', '$quietly', '$!', '$push', '$join_and', '$text', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_5;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, thing){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You're not carrying " + (self.$the(thing)) + ".")}, TMP_1.$$s = self, TMP_1), $a).call($b, "drop", (($scope.get('Query')).$$scope.get('Visible')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this, $a, $b;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    (($a = [actor.$parent()]), $b = thing, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      return actor.$tell("You drop " + (self.$the(thing)) + ".");}, TMP_2.$$s = self, TMP_2), $a).call($c, "drop", (($scope.get('Query')).$$scope.get('Children')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, things){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (actor == null) actor = nil;if (things == null) things = nil;
    return ($a = ($b = things).$each, $a.$$p = (TMP_4 = function(thing){var self = TMP_4.$$s || this;
if (thing == null) thing = nil;
      return actor.$perform("drop", thing)}, TMP_4.$$s = self, TMP_4), $a).call($b)}, TMP_3.$$s = self, TMP_3), $a).call($d, "drop", $scope.get('Use').$many_visible());

    ($a = ($e = self).$respond, $a.$$p = (TMP_5 = function(actor, text){var self = TMP_5.$$s || this, $a, $b, TMP_6, children = nil, dropped = nil;
if (actor == null) actor = nil;if (text == null) text = nil;
    children = actor.$children().$that_are_not("attached?");
      if (children.$length()['$=='](0)) {
        return actor.$tell("You don't have anything to drop.")
        } else {
        dropped = [];
        return ($a = ($b = children).$each, $a.$$p = (TMP_6 = function(child){var self = TMP_6.$$s || this, $a, buffer = nil;
if (child == null) child = nil;
        buffer = actor.$quietly("drop", child);
          if ((($a = child.$parent()['$=='](actor)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            dropped.$push(child)
            } else {
            actor.$tell(buffer)
          };
          if ($rb_gt(dropped.$length(), 0)) {
            return actor.$tell("You drop " + (dropped.$join_and()) + ".")
            } else {
            return nil
          };}, TMP_6.$$s = self, TMP_6), $a).call($b);
      };}, TMP_5.$$s = self, TMP_5), $a).call($e, "drop", $scope.get('Use').$text("all", "everything"));

    self.$interpret("put down :thing", "drop :thing");

    self.$interpret("put :thing down", "drop :thing");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/enter"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$respond', '$parent=', '$tell', '$the', '$siblings', '$open?', '$proceed', '$The', '$parent', '$text', '$that_are', '$children', '$room', '$==', '$length', '$perform', '$[]', '$join_or', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6, $h, TMP_7, $i, TMP_8, $j, TMP_9;

    self.$include($scope.get('Gamefic'));

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, supporter){var self = TMP_1.$$s || this, $a, $b;
if (actor == null) actor = nil;if (supporter == null) supporter = nil;
    (($a = [supporter]), $b = actor, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      return actor.$tell("You get on " + (self.$the(supporter)) + ".");}, TMP_1.$$s = self, TMP_1), $a).call($b, "enter", $scope.get('Use').$siblings((($scope.get('Gamefic')).$$scope.get('Supporter')), "enterable?"));

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, container){var self = TMP_2.$$s || this, $a, $b;
if (actor == null) actor = nil;if (container == null) container = nil;
    (($a = [container]), $b = actor, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      return actor.$tell("You get in " + (self.$the(container)) + ".");}, TMP_2.$$s = self, TMP_2), $a).call($c, "enter", $scope.get('Use').$siblings($scope.get('Receptacle'), "enterable?"));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, container){var self = TMP_3.$$s || this, $a;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = container['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$proceed()
        } else {
        return actor.$tell("" + (self.$The(container)) + " is closed.")
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "enter", $scope.get('Use').$siblings($scope.get('Container'), "enterable?"));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, thing){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("" + (self.$The(thing)) + " can't accommodate you.")}, TMP_4.$$s = self, TMP_4), $a).call($e, "enter", $scope.get('Use').$siblings($scope.get('Thing')));

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, container){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;if (container == null) container = nil;
    return actor.$tell("You're already in " + (self.$the(container)) + ".")}, TMP_5.$$s = self, TMP_5), $a).call($f, "enter", $scope.get('Use').$parent());

    ($a = ($g = self).$respond, $a.$$p = (TMP_6 = function(actor, supporter){var self = TMP_6.$$s || this;
if (actor == null) actor = nil;if (supporter == null) supporter = nil;
    return actor.$tell("You're already on " + (self.$the(supporter)) + ".")}, TMP_6.$$s = self, TMP_6), $a).call($g, "enter", $scope.get('Use').$parent($scope.get('Supporter')));

    ($a = ($h = self).$respond, $a.$$p = (TMP_7 = function(actor, receptacle){var self = TMP_7.$$s || this;
if (actor == null) actor = nil;if (receptacle == null) receptacle = nil;
    return actor.$tell("You're already in " + (self.$the(receptacle)) + ".")}, TMP_7.$$s = self, TMP_7), $a).call($h, "enter", $scope.get('Use').$parent($scope.get('Receptacle')));

    ($a = ($i = self).$respond, $a.$$p = (TMP_8 = function(actor, text){var self = TMP_8.$$s || this;
if (actor == null) actor = nil;if (text == null) text = nil;
    return actor.$tell("You don't see any \"" + (text) + "\" here.")}, TMP_8.$$s = self, TMP_8), $a).call($i, "enter", $scope.get('Use').$text());

    ($a = ($j = self).$respond, $a.$$p = (TMP_9 = function(actor){var self = TMP_9.$$s || this, supporters = nil;
if (actor == null) actor = nil;
    supporters = actor.$room().$children().$that_are($scope.get('Supporter')).$that_are("enterable");
      if (supporters.$length()['$=='](1)) {
        return actor.$perform("enter", supporters['$[]'](0))
      } else if ($rb_gt(supporters.$length(), 1)) {
        return actor.$tell("I don't know where you want to sit: " + (supporters.$join_or()) + ".")
        } else {
        return actor.$tell("There's nowhere to sit here.")
      };}, TMP_9.$$s = self, TMP_9), $a).call($j, "sit");

    self.$interpret("sit :thing", "enter :thing");

    self.$interpret("sit on :thing", "enter :thing");

    self.$interpret("get on :thing", "enter :thing");

    self.$interpret("get in :thing", "enter :thing");

    self.$interpret("stand on :thing", "enter :thing");

    self.$interpret("sit down", "sit");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/give"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$!', '$==', '$parent', '$perform', '$new', '$tell', '$the', '$The', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, character, gift){var self = TMP_1.$$s || this, $a;
if (actor == null) actor = nil;if (character == null) character = nil;if (gift == null) gift = nil;
    if ((($a = gift.$parent()['$=='](actor)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("take", gift)};
      if (gift.$parent()['$=='](actor)) {
        return actor.$perform("give", character, gift)
        } else {
        return nil
      };}, TMP_1.$$s = self, TMP_1), $a).call($b, "give", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Character')), (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, character, gift){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;if (gift == null) gift = nil;
    return actor.$tell("Nothing happens.")}, TMP_2.$$s = self, TMP_2), $a).call($c, "give", (($scope.get('Query')).$$scope.get('Reachable')).$new(), (($scope.get('Query')).$$scope.get('Children')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, character, gift){var self = TMP_3.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;if (gift == null) gift = nil;
    return actor.$tell("You don't have " + (self.$the(gift)) + ".")}, TMP_3.$$s = self, TMP_3), $a).call($d, "give", (($scope.get('Query')).$$scope.get('Reachable')).$new(), (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, character, gift){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;if (gift == null) gift = nil;
    return actor.$tell("" + (self.$The(character)) + " doesn't want " + (self.$the(gift)) + ".")}, TMP_4.$$s = self, TMP_4), $a).call($e, "give", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Character')), (($scope.get('Query')).$$scope.get('Children')).$new());

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, character, gift){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;if (gift == null) gift = nil;
    return actor.$tell("You don't see any \"" + (character) + "\" here.")}, TMP_5.$$s = self, TMP_5), $a).call($f, "give", (($scope.get('Query')).$$scope.get('Text')).$new(), (($scope.get('Query')).$$scope.get('Children')).$new());

    self.$xlate("give :gift to :character", "give :character :gift");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/go"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$respond', '$!', '$==', '$parent', '$room', '$perform', '$nil?', '$destination', '$tell', '$parent=', '$direction', '$new', '$The', '$automatic?', '$open?', '$proceed', '$that_are', '$children', '$each', '$push', '$[]=', '$execute', '$length', '$objects', '$[]', '$text', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_7;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, portal){var self = TMP_1.$$s || this, $a, $b;
if (actor == null) actor = nil;if (portal == null) portal = nil;
    if ((($a = actor.$parent()['$=='](actor.$room())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("leave")};
      if (actor.$parent()['$=='](actor.$room())) {
        if ((($a = portal.$destination()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$tell("That portal leads nowhere.")
          } else {
          (($a = [portal.$destination()]), $b = actor, $b['$parent='].apply($b, $a), $a[$a.length-1]);
          actor.$tell("You go " + (portal.$direction()) + ".");
          return actor.$perform("look", actor.$room());
        }
        } else {
        return nil
      };}, TMP_1.$$s = self, TMP_1), $a).call($b, "go", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Portal')));

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, door){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (door == null) door = nil;
    return actor.$tell("" + (self.$The(door)) + " is locked.")}, TMP_2.$$s = self, TMP_2), $a).call($c, "go", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Door'), "locked?"));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, door){var self = TMP_3.$$s || this, $a;
if (actor == null) actor = nil;if (door == null) door = nil;
    if ((($a = door['$automatic?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("open", door);
        if ((($a = door['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$proceed()
          } else {
          return nil
        };
        } else {
        return actor.$tell("" + (self.$The(door)) + " is closed.")
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "go", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Door'), "closed?"));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, string){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (string == null) string = nil;
    return actor.$tell("You don't see any exit \"" + (string) + "\" from here.")}, TMP_4.$$s = self, TMP_4), $a).call($e, "go", (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, text){var self = TMP_5.$$s || this, $a, $b, TMP_6, portals = nil, destinations = nil, d_map = nil, matches = nil;
if (actor == null) actor = nil;if (text == null) text = nil;
    portals = actor.$room().$children().$that_are($scope.get('Portal'));
      destinations = [];
      d_map = $hash2([], {});
      ($a = ($b = portals).$each, $a.$$p = (TMP_6 = function(portal){var self = TMP_6.$$s || this, $a;
if (portal == null) portal = nil;
      if ((($a = portal.$destination()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil;};
        destinations.$push(portal.$destination());
        return d_map['$[]='](portal.$destination(), portal);}, TMP_6.$$s = self, TMP_6), $a).call($b);
      matches = (($scope.get('Query')).$$scope.get('Base')).$new().$execute(destinations, text);
      if (matches.$objects().$length()['$=='](1)) {
        return actor.$perform("go", d_map['$[]'](matches.$objects()['$[]'](0)))
        } else {
        return actor.$proceed()
      };}, TMP_5.$$s = self, TMP_5), $a).call($f, "go", $scope.get('Use').$text());

    ($a = ($g = self).$respond, $a.$$p = (TMP_7 = function(actor){var self = TMP_7.$$s || this;
if (actor == null) actor = nil;
    return actor.$tell("Where do you want to go?")}, TMP_7.$$s = self, TMP_7), $a).call($g, "go");

    self.$xlate("north", "go north");

    self.$xlate("south", "go south");

    self.$xlate("west", "go west");

    self.$xlate("east", "go east");

    self.$xlate("up", "go up");

    self.$xlate("down", "go down");

    self.$xlate("northwest", "go northwest");

    self.$xlate("northeast", "go northeast");

    self.$xlate("southwest", "go southwest");

    self.$xlate("southeast", "go southeast");

    self.$xlate("n", "go north");

    self.$xlate("s", "go south");

    self.$xlate("w", "go west");

    self.$xlate("e", "go east");

    self.$xlate("u", "go up");

    self.$xlate("d", "go down");

    self.$xlate("nw", "go northwest");

    self.$xlate("ne", "go northeast");

    self.$xlate("sw", "go southwest");

    self.$xlate("se", "go southeast");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/insert"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$the', '$visible', '$reachable', '$auto_takes?', '$parent=', '$open?', '$proceed', '$The', '$text', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, thing, target){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (target == null) target = nil;
    return actor.$tell("You can't put " + (self.$the(thing)) + " inside " + (self.$the(target)) + ".")}, TMP_1.$$s = self, TMP_1), $a).call($b, "insert", $scope.get('Use').$visible(), $scope.get('Use').$reachable());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing, receptacle){var self = TMP_2.$$s || this, $a, $b;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (receptacle == null) receptacle = nil;
    if ((($a = actor['$auto_takes?'](thing)) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$tell("You put " + (self.$the(thing)) + " in " + (self.$the(receptacle)) + ".");
        return (($a = [receptacle]), $b = thing, $b['$parent='].apply($b, $a), $a[$a.length-1]);
        } else {
        return nil
      }}, TMP_2.$$s = self, TMP_2), $a).call($c, "insert", $scope.get('Use').$visible(), $scope.get('Use').$reachable($scope.get('Receptacle')));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, thing, container){var self = TMP_3.$$s || this, $a;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (container == null) container = nil;
    if ((($a = container['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$proceed()
        } else {
        return actor.$tell("" + (self.$The(container)) + " is closed.")
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "insert", $scope.get('Use').$visible(), $scope.get('Use').$reachable($scope.get('Container')));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, thing, container){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (container == null) container = nil;
    return actor.$tell("You don't see anything called \"" + (container) + "\" here.")}, TMP_4.$$s = self, TMP_4), $a).call($e, "insert", $scope.get('Use').$visible(), $scope.get('Use').$text());

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, thing, container){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (container == null) container = nil;
    return actor.$tell("You don't see anything called \"" + (thing) + "\" here.")}, TMP_5.$$s = self, TMP_5), $a).call($f, "insert", $scope.get('Use').$text(), $scope.get('Use').$visible());

    ($a = ($g = self).$respond, $a.$$p = (TMP_6 = function(actor, thing, container){var self = TMP_6.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (container == null) container = nil;
    return actor.$tell("I don't know what you mean by \"" + (thing) + "\" or \"" + (container) + ".\"")}, TMP_6.$$s = self, TMP_6), $a).call($g, "insert", $scope.get('Use').$text(), $scope.get('Use').$text());

    self.$interpret("drop :item in :container", "insert :item :container");

    self.$interpret("put :item in :container", "insert :item :container");

    self.$interpret("place :item in :container", "insert :item :container");

    self.$interpret("insert :item in :container", "insert :item :container");

    self.$interpret("drop :item inside :container", "insert :item :container");

    self.$interpret("put :item inside :container", "insert :item :container");

    self.$interpret("place :item inside :container", "insert :item :container");

    self.$interpret("insert :item inside :container", "insert :item :container");

    self.$interpret("drop :item into :container", "insert :item :container");

    self.$interpret("put :item into :container", "insert :item :container");

    self.$interpret("place :item into :container", "insert :item :container");

    self.$interpret("insert :item into :container", "insert :item :container");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/inventory"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$length', '$children', '$tell', '$join_and', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;
    if ($rb_gt(actor.$children().$length(), 0)) {
        return actor.$tell("You are carrying " + (actor.$children().$join_and()) + ".")
        } else {
        return actor.$tell("You aren't carrying anything.")
      }}, TMP_1.$$s = self, TMP_1), $a).call($b, "inventory");

    self.$xlate("i", "inventory");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/leave"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$parent=', '$parent', '$tell', '$the', '$new', '$open?', '$proceed', '$The', '$that_are', '$children', '$==', '$length', '$perform', '$[]', '$join_or', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, supporter){var self = TMP_1.$$s || this, $a, $b;
if (actor == null) actor = nil;if (supporter == null) supporter = nil;
    (($a = [supporter.$parent()]), $b = actor, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      return actor.$tell("You get off " + (self.$the(supporter)) + ".");}, TMP_1.$$s = self, TMP_1), $a).call($b, "leave", (($scope.get('Query')).$$scope.get('Parent')).$new($scope.get('Supporter')));

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, receptacle){var self = TMP_2.$$s || this, $a, $b;
if (actor == null) actor = nil;if (receptacle == null) receptacle = nil;
    (($a = [receptacle.$parent()]), $b = actor, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      return actor.$tell("You get out of " + (self.$the(receptacle)) + ".");}, TMP_2.$$s = self, TMP_2), $a).call($c, "leave", (($scope.get('Query')).$$scope.get('Parent')).$new($scope.get('Receptacle')));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, container){var self = TMP_3.$$s || this, $a;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = container['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$proceed()
        } else {
        return actor.$tell("" + (self.$The(container)) + " is closed.")
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "leave", $scope.get('Use').$parent($scope.get('Container')));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, room){var self = TMP_4.$$s || this, portals = nil;
if (actor == null) actor = nil;if (room == null) room = nil;
    portals = room.$children().$that_are($scope.get('Portal'));
      if (portals.$length()['$=='](0)) {
        return actor.$tell("You don't see any obvious exits.")
      } else if (portals.$length()['$=='](1)) {
        return actor.$perform("go", portals['$[]'](0))
        } else {
        return actor.$tell("I don't know which way you want to go: " + (portals.$join_or()) + ".")
      };}, TMP_4.$$s = self, TMP_4), $a).call($e, "leave", (($scope.get('Query')).$$scope.get('Parent')).$new($scope.get('Room')));

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;
    return actor.$perform("leave", actor.$parent())}, TMP_5.$$s = self, TMP_5), $a).call($f, "leave");

    self.$xlate("exit", "leave");

    self.$xlate("exit :supporter", "leave :supporter");

    self.$xlate("get off :supporter", "leave :supporter");

    self.$xlate("get up from :supporter", "leave :supporter");

    self.$xlate("get up", "leave");

    self.$xlate("stand", "leave");

    self.$xlate("stand up", "leave");

    self.$xlate("get off", "leave");

    self.$xlate("get out :container", "leave :container");

    self.$xlate("get out of :container", "leave :container");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/lock"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$new', '$the', '$portable?', '$!', '$==', '$parent', '$perform', '$locked?', '$nil?', '$lock_key', '$locked=', '$locked', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, string){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (string == null) string = nil;
    return actor.$tell("You don't see any \"" + (string) + "\" here.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "lock", (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You can't lock " + (self.$the(thing)) + ".")}, TMP_2.$$s = self, TMP_2), $a).call($c, "lock", (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, container){var self = TMP_3.$$s || this, $a, $b, key = nil;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = ($b = container['$portable?'](), $b !== false && $b !== nil ?container.$parent()['$=='](actor)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("take", container);
        if ((($a = container.$parent()['$=='](actor)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($breaker.$v = nil, $breaker)};};
      if ((($a = container['$locked?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("It's already locked.")
        } else {
        key = nil;
        if (container.$lock_key()['$nil?']()['$=='](false)) {
          if (container.$lock_key().$parent()['$=='](actor)) {
            key = container.$lock_key()}};
        if ((($a = key['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$tell("You don't have any way to lock " + (self.$the(container)) + ".")
          } else {
          actor.$tell("You lock " + (self.$the(container)) + " with " + (self.$the(key)) + ".");
          return (($a = [true]), $b = container, $b['$locked='].apply($b, $a), $a[$a.length-1]);
        };
      };}, TMP_3.$$s = self, TMP_3), $a).call($d, "lock", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable'), "has_lock_key?"));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, container, key){var self = TMP_4.$$s || this, $a, $b;
if (actor == null) actor = nil;if (container == null) container = nil;if (key == null) key = nil;
    if (container.$locked()['$=='](false)) {
        if (container.$lock_key()['$=='](key)) {
          actor.$tell("You lock " + (self.$the(container)) + " with " + (self.$the(key)) + ".");
          return (($a = [true]), $b = container, $b['$locked='].apply($b, $a), $a[$a.length-1]);
          } else {
          return actor.$tell("You can't lock " + (self.$the(container)) + " with " + (self.$the(key)) + ".")
        }
        } else {
        return actor.$tell("It's already locked.")
      }}, TMP_4.$$s = self, TMP_4), $a).call($e, "lock", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable'), "has_lock_key?"), (($scope.get('Query')).$$scope.get('Children')).$new());

    self.$xlate("lock :container with :key", "lock :container :key");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/look-under"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$the', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, thing){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("There's nothing to see under " + (self.$the(thing)) + ".")}, TMP_1.$$s = self, TMP_1), $a).call($b, "look_under", (($scope.get('Query')).$$scope.get('Reachable')).$new())
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/look"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$description', '$the', '$parent', '$new', '$cap_first', '$name', '$that_are', '$children', '$each', '$!', '$==', '$locale_description', '$push', '$length', '$join_and', '$explicit_exits?', '$direction', '$[]', '$kind_of?', '$A', '$that_are_not', '$xlate', '$An', '$text', '$has_description?', '$perform', '$reachable', '$proceed', '$The', '$open?', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_9, $f, TMP_11, $g, TMP_12, $h, TMP_13, $i, TMP_14;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, supporter){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (supporter == null) supporter = nil;
    actor.$tell(supporter.$description());
      return actor.$tell("You are currently on " + (self.$the(supporter)) + ".");}, TMP_1.$$s = self, TMP_1), $a).call($b, "look", $scope.get('Use').$parent($scope.get('Supporter')));

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, _){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (_ == null) _ = nil;
    return actor.$tell(actor.$description())}, TMP_2.$$s = self, TMP_2), $a).call($c, "look", (($scope.get('Query')).$$scope.get('Self')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, room){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, with_locales = nil, chars = nil, charsum = nil, items = nil, itemsum = nil, portals = nil, dirs = nil;
if (actor == null) actor = nil;if (room == null) room = nil;
    actor.$tell("<strong>" + (room.$name().$cap_first()) + "</strong>");
      actor.$tell(room.$description());
      with_locales = [];
      chars = $rb_minus(room.$children().$that_are($scope.get('Character')).$that_are("itemized?"), [actor]);
      charsum = [];
      ($a = ($b = chars).$each, $a.$$p = (TMP_4 = function(char$){var self = TMP_4.$$s || this, $a;
if (char$ == null) char$ = nil;
      if ((($a = char$.$locale_description()['$==']("")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return with_locales.$push(char$)
          } else {
          return charsum.$push(char$)
        }}, TMP_4.$$s = self, TMP_4), $a).call($b);
      if ($rb_gt(charsum.$length(), 0)) {
        actor.$tell("" + (charsum.$join_and().$cap_first()) + " " + ((function() {if (charsum.$length()['$=='](1)) {
          return "is"
          } else {
          return "are"
        }; return nil; })()) + " here.")};
      items = $rb_minus($rb_minus($rb_minus(room.$children().$that_are("itemized?"), [actor]), room.$children().$that_are($scope.get('Character'))), room.$children().$that_are($scope.get('Portal')));
      itemsum = [];
      ($a = ($c = items).$each, $a.$$p = (TMP_5 = function(item){var self = TMP_5.$$s || this, $a;
if (item == null) item = nil;
      if ((($a = item.$locale_description()['$==']("")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return with_locales.$push(item)
          } else {
          return itemsum.$push(item)
        }}, TMP_5.$$s = self, TMP_5), $a).call($c);
      if ($rb_gt(itemsum.$length(), 0)) {
        actor.$tell("You see " + (itemsum.$join_and()) + ".")};
      ($a = ($d = with_locales).$each, $a.$$p = (TMP_6 = function(entity){var self = TMP_6.$$s || this;
if (entity == null) entity = nil;
      return actor.$tell(entity.$locale_description())}, TMP_6.$$s = self, TMP_6), $a).call($d);
      if ((($a = room['$explicit_exits?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        portals = room.$children().$that_are($scope.get('Portal')).$that_are("itemized?");
        if ($rb_gt(portals.$length(), 0)) {
          if (portals.$length()['$=='](1)) {
            actor.$tell("There is an exit " + (portals['$[]'](0).$direction()) + ".")
            } else {
            dirs = [];
            ($a = ($e = portals).$each, $a.$$p = (TMP_7 = function(p){var self = TMP_7.$$s || this;
if (p == null) p = nil;
            return dirs.$push(p.$direction())}, TMP_7.$$s = self, TMP_7), $a).call($e);
            actor.$tell("There are exits " + (dirs.$join_and(", ")) + ".");
          }};};
      if ((($a = actor.$parent()['$kind_of?']($scope.get('Supporter'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$tell("You are on " + (self.$the(actor.$parent())) + ".");
        return ($a = ($f = actor.$parent().$children().$that_are_not(actor)).$each, $a.$$p = (TMP_8 = function(s){var self = TMP_8.$$s || this;
if (s == null) s = nil;
        return actor.$tell("" + (self.$A(s)) + " is on " + (self.$the(actor.$parent())) + ".")}, TMP_8.$$s = self, TMP_8), $a).call($f);
        } else {
        return nil
      };}, TMP_3.$$s = self, TMP_3), $a).call($d, "look", (($scope.get('Query')).$$scope.get('Room')).$new($scope.get('Room')));

    self.$xlate("look", "look around");

    self.$xlate("l", "look around");

    ($a = ($e = self).$respond, $a.$$p = (TMP_9 = function(actor, thing){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    actor.$tell(thing.$description());
      return ($a = ($b = thing.$children().$that_are("attached?").$that_are("itemized?")).$each, $a.$$p = (TMP_10 = function(item){var self = TMP_10.$$s || this;
if (item == null) item = nil;
      return actor.$tell("" + (self.$An(item)) + " is attached to " + (self.$the(thing)) + ".")}, TMP_10.$$s = self, TMP_10), $a).call($b);}, TMP_9.$$s = self, TMP_9), $a).call($e, "look", (($scope.get('Query')).$$scope.get('Visible')).$new());

    ($a = ($f = self).$respond, $a.$$p = (TMP_11 = function(actor, string){var self = TMP_11.$$s || this;
if (actor == null) actor = nil;if (string == null) string = nil;
    return actor.$tell("You don't see any \"" + (string) + "\" here.")}, TMP_11.$$s = self, TMP_11), $a).call($f, "look", $scope.get('Use').$text());

    ($a = ($g = self).$respond, $a.$$p = (TMP_12 = function(actor, receptacle){var self = TMP_12.$$s || this, $a;
if (actor == null) actor = nil;if (receptacle == null) receptacle = nil;
    if ((($a = receptacle['$has_description?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$tell(receptacle.$description())};
      return actor.$perform("search", receptacle);}, TMP_12.$$s = self, TMP_12), $a).call($g, "look", $scope.get('Use').$reachable($scope.get('Receptacle')));

    ($a = ($h = self).$respond, $a.$$p = (TMP_13 = function(actor, supporter){var self = TMP_13.$$s || this, supported = nil;
if (actor == null) actor = nil;if (supporter == null) supporter = nil;
    actor.$proceed();
      supported = supporter.$children().$that_are_not("attached?");
      if ($rb_gt(supported.$length(), 0)) {
        return actor.$tell("You see " + (supported.$join_and()) + " sitting there.")
        } else {
        return nil
      };}, TMP_13.$$s = self, TMP_13), $a).call($h, "look", (($scope.get('Query')).$$scope.get('Visible')).$new($scope.get('Supporter')));

    ($a = ($i = self).$respond, $a.$$p = (TMP_14 = function(actor, door){var self = TMP_14.$$s || this, $a;
if (actor == null) actor = nil;if (door == null) door = nil;
    if ((($a = door['$has_description?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$proceed()};
      return actor.$tell($rb_plus($rb_plus("" + (self.$The(door)) + " is ", ((function() {if ((($a = door['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return "open"
        } else {
        return "closed"
      }; return nil; })())), "."));}, TMP_14.$$s = self, TMP_14), $a).call($i, "look", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Door')));

    self.$interpret("look at :thing", "look :thing");

    self.$interpret("l :thing", "look :thing");

    self.$interpret("examine :thing", "look :thing");

    self.$interpret("x :thing", "look :thing");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/nil"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$meta', '$split_words', '$include?', '$commandwords', '$[]', '$length', '$tell', '$each', '$start_with?', '$push', '$==', '$[]=', '$perform', '$join', '$join_and', '$new', '$proceed']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

    ($a = ($b = self).$meta, $a.$$p = (TMP_1 = function(actor, string){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, words = nil, found = nil;
if (actor == null) actor = nil;if (string == null) string = nil;
    words = string.$split_words();
      if ((($a = self.$commandwords()['$include?'](words['$[]'](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ($rb_gt(words.$length(), 1)) {
          return actor.$tell("I recognize '" + (words['$[]'](0)) + "' as a verb but could not understand the rest of your sentence.")
          } else {
          return actor.$tell("I recognize '" + (words['$[]'](0)) + "' as a verb but could not understand it in this context.")
        }
        } else {
        found = [];
        ($a = ($b = self.$commandwords()).$each, $a.$$p = (TMP_2 = function(c){var self = TMP_2.$$s || this, $a, $b;
if (c == null) c = nil;
        if ((($a = c['$include?']("_")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil;};
          if ((($a = (($b = $rb_gt(c.$length(), words['$[]'](0).$length())) ? c['$start_with?'](words['$[]'](0)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return found.$push(c)
            } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2), $a).call($b);
        if (found.$length()['$=='](1)) {
          words['$[]='](0, found['$[]'](0));
          return actor.$perform(words.$join(" "));
        } else if ((($a = (($c = $rb_gt(found.$length(), 1)) ? $rb_gt(words['$[]'](0).$length(), 2) : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$tell("I'm not sure if " + (words['$[]'](0)) + " means " + (found.$join_and(", ", " or ")) + ".")
          } else {
          return actor.$tell("I don't recognize '" + (words['$[]'](0)) + "' as a verb.")
        };
      };}, TMP_1.$$s = self, TMP_1), $a).call($b, nil, (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($c = self).$meta, $a.$$p = (TMP_3 = function(actor, string){var self = TMP_3.$$s || this, $a, words = nil;
if (actor == null) actor = nil;if (string == null) string = nil;
    words = string.$split_words();
      if ((($a = self.$commandwords()['$include?'](words['$[]'](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("I'm not sure what you mean by \"it.\"")
        } else {
        return actor.$proceed()
      };}, TMP_3.$$s = self, TMP_3), $a).call($c, nil, (($scope.get('Query')).$$scope.get('Text')).$new("it"));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/open"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$new', '$the', '$portable?', '$!', '$==', '$parent', '$perform', '$locked?', '$The', '$open?', '$open=', '$proceed']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, string){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (string == null) string = nil;
    return actor.$tell("You don't see any \"" + (string) + "\" here.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "open", (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You can't open " + (self.$the(thing)) + ".")}, TMP_2.$$s = self, TMP_2), $a).call($c, "open", (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, container){var self = TMP_3.$$s || this, $a, $b;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = ($b = container['$portable?'](), $b !== false && $b !== nil ?container.$parent()['$=='](actor)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("take", container);
        if ((($a = container.$parent()['$=='](actor)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($breaker.$v = nil, $breaker)};};
      if ((($a = container['$locked?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("" + (self.$The(container)) + " is locked.")
      } else if ((($a = container['$open?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$tell("You open " + (self.$the(container)) + ".");
        (($a = [true]), $b = container, $b['$open='].apply($b, $a), $a[$a.length-1]);
        return actor.$perform("search", container);
        } else {
        return actor.$tell("It's already open.")
      };}, TMP_3.$$s = self, TMP_3), $a).call($d, "open", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Portable'), $scope.get('Openable')));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, container){var self = TMP_4.$$s || this, $a;
if (actor == null) actor = nil;if (container == null) container = nil;
    actor.$proceed();
      if ((($a = container['$open?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$perform("search", container)
        } else {
        return nil
      };}, TMP_4.$$s = self, TMP_4), $a).call($e, "open", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Container')));
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/place"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$the', '$children', '$reachable', '$!', '$==', '$parent', '$perform', '$visible', '$parent=', '$text', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, thing, supporter){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (supporter == null) supporter = nil;
    return actor.$tell("You can't put " + (self.$the(thing)) + " on " + (self.$the(supporter)) + ".")}, TMP_1.$$s = self, TMP_1), $a).call($b, "place", $scope.get('Use').$children(), $scope.get('Use').$reachable());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing, supporter){var self = TMP_2.$$s || this, $a;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (supporter == null) supporter = nil;
    if ((($a = thing.$parent()['$=='](actor)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("take", thing)};
      if (thing.$parent()['$=='](actor)) {
        return actor.$perform("place", thing)
        } else {
        return nil
      };}, TMP_2.$$s = self, TMP_2), $a).call($c, "place", $scope.get('Use').$visible(), $scope.get('Use').$reachable($scope.get('Supporter')));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, thing, supporter){var self = TMP_3.$$s || this, $a, $b;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (supporter == null) supporter = nil;
    (($a = [supporter]), $b = thing, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      return actor.$tell("You put " + (self.$the(thing)) + " on " + (self.$the(supporter)) + ".");}, TMP_3.$$s = self, TMP_3), $a).call($d, "place", $scope.get('Use').$children(), $scope.get('Use').$reachable($scope.get('Supporter')));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, thing, supporter){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (supporter == null) supporter = nil;
    return actor.$tell("You don't see anything called \"" + (supporter) + "\" here.")}, TMP_4.$$s = self, TMP_4), $a).call($e, "place", $scope.get('Use').$visible(), $scope.get('Use').$text());

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, thing, supporter){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (supporter == null) supporter = nil;
    return actor.$tell("You don't see anything called \"" + (thing) + "\" here.")}, TMP_5.$$s = self, TMP_5), $a).call($f, "place", $scope.get('Use').$text(), $scope.get('Use').$visible());

    ($a = ($g = self).$respond, $a.$$p = (TMP_6 = function(actor, thing, supporter){var self = TMP_6.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (supporter == null) supporter = nil;
    return actor.$tell("I don't know what you mean by \"" + (thing) + "\" or \"" + (supporter) + ".\"")}, TMP_6.$$s = self, TMP_6), $a).call($g, "place", $scope.get('Use').$text(), $scope.get('Use').$text());

    self.$xlate("put :thing on :supporter", "place :thing :supporter");

    self.$xlate("put :thing down on :supporter", "place :thing :supporter");

    self.$xlate("set :thing on :supporter", "place :thing :supporter");

    self.$xlate("set :thing down on :supporter", "place :thing :supporter");

    self.$xlate("drop :thing on :supporter", "place :thing :supporter");

    self.$xlate("place :thing on :supporter", "place :thing :supporter");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/quit"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$yes_or_no', '$==', '$answer', '$cue', '$meta']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2;

    ($a = ($b = self).$yes_or_no, $a.$$p = (TMP_1 = function(actor, data){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (data == null) data = nil;
    if (data.$answer()['$==']("yes")) {
        return self.$cue(actor, "concluded")
        } else {
        return self.$cue(actor, "active")
      }}, TMP_1.$$s = self, TMP_1), $a).call($b, "confirm_quit", "Are you sure you want to quit?");

    ($a = ($c = self).$meta, $a.$$p = (TMP_2 = function(actor){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;
    return self.$cue(actor, "confirm_quit")}, TMP_2.$$s = self, TMP_2), $a).call($c, "quit");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/read"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$perform', '$new']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, thing){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$perform("look", thing)}, TMP_1.$$s = self, TMP_1), $a).call($b, "read", (($scope.get('Query')).$$scope.get('Visible')).$new())
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/search"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$that_are_not', '$children', '$length', '$tell', '$join_and', '$The', '$be', '$verb', '$reachable', '$open?', '$transparent?', '$proceed', '$perform', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, receptacle){var self = TMP_1.$$s || this, contents = nil;
if (actor == null) actor = nil;if (receptacle == null) receptacle = nil;
    contents = receptacle.$children().$that_are_not("attached?");
      if ($rb_gt(contents.$length(), 0)) {
        return actor.$tell("Inside " + ((function() {if ($rb_gt(contents.$length(), 1)) {
          return "are"
          } else {
          return "is"
        }; return nil; })()) + " " + (contents.$join_and()) + ".")
        } else {
        return actor.$tell("" + (self.$The(receptacle)) + " " + (receptacle.$verb().$be()) + " empty.")
      };}, TMP_1.$$s = self, TMP_1), $a).call($b, "search", $scope.get('Use').$reachable($scope.get('Receptacle')));

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, container){var self = TMP_2.$$s || this, $a, $b;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = ((($b = container['$open?']()) !== false && $b !== nil) ? $b : container['$transparent?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$proceed()
        } else {
        return actor.$tell("" + (self.$The(container)) + " " + (container.$verb().$be()) + " closed.")
      }}, TMP_2.$$s = self, TMP_2), $a).call($c, "search", $scope.get('Use').$reachable($scope.get('Container')));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, thing){var self = TMP_3.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$perform("look", thing)}, TMP_3.$$s = self, TMP_3), $a).call($d, "search", $scope.get('Use').$reachable());

    self.$interpret("look in :thing", "search :thing");

    self.$interpret("look inside :thing", "search :thing");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/show"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$The', '$the', '$reachable', '$children', '$text', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, character, thing){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;if (thing == null) thing = nil;
    return actor.$tell("" + (self.$The(character)) + " isn't interested in " + (self.$the(thing)) + ".")}, TMP_1.$$s = self, TMP_1), $a).call($b, "show", $scope.get('Use').$reachable($scope.get('Character')), $scope.get('Use').$children());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, witness, thing){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (witness == null) witness = nil;if (thing == null) thing = nil;
    return actor.$tell("Nothing happens.")}, TMP_2.$$s = self, TMP_2), $a).call($c, "show", $scope.get('Use').$reachable(), $scope.get('Use').$children());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, thing, text){var self = TMP_3.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;if (text == null) text = nil;
    return actor.$tell("You don't see any \"" + (text) + "\" here.")}, TMP_3.$$s = self, TMP_3), $a).call($d, "show", $scope.get('Use').$children(), $scope.get('Use').$text());

    self.$interpret("show :thing to :character", "show :character :thing");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/take"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$the', '$reachable', '$==', '$parent', '$proceed', '$kind_of?', '$!', '$open?', '$The', '$new', '$parent=', '$text', '$each', '$perform', '$many_visible', '$that_are', '$that_are_not', '$children', '$room', '$length', '$quietly', '$push', '$join_and', '$interpret']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6, $h, TMP_7, $i, TMP_8, $j, TMP_10;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, thing){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You can't take " + (self.$the(thing)) + ".")}, TMP_1.$$s = self, TMP_1), $a).call($b, "take", $scope.get('Use').$reachable());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this, $a, $b;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    if (thing.$parent()['$=='](actor.$parent())) {
        return actor.$proceed()
      } else if ((($a = ($b = thing.$parent()['$kind_of?']($scope.get('Container')), $b !== false && $b !== nil ?thing.$parent()['$open?']()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("" + (self.$The(thing)) + " is inside " + (self.$the(thing.$parent())) + ", which is closed.")
        } else {
        return nil
      }}, TMP_2.$$s = self, TMP_2), $a).call($c, "take", (($scope.get('Query')).$$scope.get('Visible')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, thing){var self = TMP_3.$$s || this, $a, $b, $c;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    if ((($a = ($b = ($c = actor.$parent()['$kind_of?']($scope.get('Supporter')), $c !== false && $c !== nil ?actor.$parent()['$=='](thing.$parent())['$!']() : $c), $b !== false && $b !== nil ?actor.$parent()['$=='](thing.$parent().$parent())['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("You can't reach it from " + (self.$the(actor.$parent())) + ".")
        } else {
        return actor.$proceed()
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "take", (($scope.get('Query')).$$scope.get('Visible')).$new());

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, thing){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("" + (self.$The(thing)) + " is attached to " + (self.$the(thing.$parent())) + ".")}, TMP_4.$$s = self, TMP_4), $a).call($e, "take", (($scope.get('Query')).$$scope.get('Reachable')).$new("attached?"));

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, thing){var self = TMP_5.$$s || this, $a, $b;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    if (thing.$parent()['$=='](actor)) {
        return actor.$tell("You're already carrying " + (self.$the(thing)) + ".")
        } else {
        if ((($a = actor.$parent()['$=='](thing.$parent())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          actor.$tell("You take " + (self.$the(thing)) + " from " + (self.$the(thing.$parent())) + ".")
          } else {
          actor.$tell("You take " + (self.$the(thing)) + ".")
        };
        return (($a = [actor]), $b = thing, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      }}, TMP_5.$$s = self, TMP_5), $a).call($f, "take", $scope.get('Use').$reachable($scope.get('Entity'), "portable?"));

    ($a = ($g = self).$respond, $a.$$p = (TMP_6 = function(actor, rubble){var self = TMP_6.$$s || this;
if (actor == null) actor = nil;if (rubble == null) rubble = nil;
    return actor.$tell("You don't have any use for " + (self.$the(rubble)) + ".")}, TMP_6.$$s = self, TMP_6), $a).call($g, "take", $scope.get('Use').$reachable((($scope.get('Gamefic')).$$scope.get('Rubble'))));

    ($a = ($h = self).$respond, $a.$$p = (TMP_7 = function(actor, text){var self = TMP_7.$$s || this;
if (actor == null) actor = nil;if (text == null) text = nil;
    return actor.$tell("You don't see any \"" + (text) + "\" here.")}, TMP_7.$$s = self, TMP_7), $a).call($h, "take", $scope.get('Use').$text());

    ($a = ($i = self).$respond, $a.$$p = (TMP_8 = function(actor, things){var self = TMP_8.$$s || this, $a, $b, TMP_9;
if (actor == null) actor = nil;if (things == null) things = nil;
    return ($a = ($b = things).$each, $a.$$p = (TMP_9 = function(thing){var self = TMP_9.$$s || this;
if (thing == null) thing = nil;
      return actor.$perform("take", thing)}, TMP_9.$$s = self, TMP_9), $a).call($b)}, TMP_8.$$s = self, TMP_8), $a).call($i, "take", $scope.get('Use').$many_visible());

    ($a = ($j = self).$respond, $a.$$p = (TMP_10 = function(actor, text){var self = TMP_10.$$s || this, $a, $b, TMP_11, children = nil, taken = nil;
if (actor == null) actor = nil;if (text == null) text = nil;
    children = actor.$parent().$children().$that_are_not("attached?").$that_are("portable?");
      if ((($a = ($b = actor.$parent()['$=='](actor.$room())['$!'](), $b !== false && $b !== nil ?actor.$parent()['$kind_of?']($scope.get('Supporter')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        children = $rb_plus(children, actor.$room().$children().$that_are_not("attached?").$that_are("portable?"))};
      if (children.$length()['$=='](0)) {
        return actor.$tell("There's nothing obvious to take.")
        } else {
        taken = [];
        return ($a = ($b = children).$each, $a.$$p = (TMP_11 = function(child){var self = TMP_11.$$s || this, buffer = nil;
if (child == null) child = nil;
        buffer = actor.$quietly("take", child);
          if (child.$parent()['$=='](actor)) {
            taken.$push(child)
            } else {
            actor.$tell(buffer)
          };
          if ($rb_gt(taken.$length(), 0)) {
            return actor.$tell("You take " + (taken.$join_and()) + ".")
            } else {
            return nil
          };}, TMP_11.$$s = self, TMP_11), $a).call($b);
      };}, TMP_10.$$s = self, TMP_10), $a).call($j, "take", $scope.get('Use').$text("all", "everything"));

    self.$interpret("get :thing", "take :thing");

    self.$interpret("pick up :thing", "take :thing");

    self.$interpret("pick :thing up", "take :thing");

    self.$interpret("carry :thing", "take :thing");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/talk"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$perform', '$new', '$==', '$The', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;
    return actor.$tell("You talk to yourself.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "talk");

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, yourself){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (yourself == null) yourself = nil;
    return actor.$perform("talk")}, TMP_2.$$s = self, TMP_2), $a).call($c, "talk", (($scope.get('Query')).$$scope.get('Self')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, thing){var self = TMP_3.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("Nothing happens.")}, TMP_3.$$s = self, TMP_3), $a).call($d, "talk", (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, character){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;
    if (actor['$=='](character)) {
        return actor.$perform("talk")
        } else {
        return actor.$tell("" + (self.$The(character)) + " has nothing to say.")
      }}, TMP_4.$$s = self, TMP_4), $a).call($e, "talk", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Character')));

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, character, text){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;if (character == null) character = nil;if (text == null) text = nil;
    return actor.$perform("talk", character)}, TMP_5.$$s = self, TMP_5), $a).call($f, "talk", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Character')), (($scope.get('Query')).$$scope.get('Text')).$new());

    self.$xlate("talk to :character", "talk :character");

    self.$xlate("talk to :character about :subject", "talk :character :subject");

    self.$xlate("ask :character :subject", "talk :character :subject");

    self.$xlate("ask :character about :subject", "talk :character :subject");

    self.$xlate("tell :character :subject", "talk :character :subject");

    self.$xlate("tell :character about :subject", "talk :character :subject");

    self.$xlate("ask :character for :subject", "talk :character :subject");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/unlock"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$new', '$the', '$portable?', '$!', '$==', '$parent', '$perform', '$locked?', '$The', '$nil?', '$lock_key', '$locked=', '$is?', '$key', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6, $h, TMP_7;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, string){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (string == null) string = nil;
    return actor.$tell("You don't see any \"" + (string) + "\" here.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "unlock", (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You can't unlock " + (self.$the(thing)) + ".")}, TMP_2.$$s = self, TMP_2), $a).call($c, "unlock", (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, container){var self = TMP_3.$$s || this, $a, $b, key = nil;
if (actor == null) actor = nil;if (container == null) container = nil;
    if ((($a = ($b = container['$portable?'](), $b !== false && $b !== nil ?container.$parent()['$=='](actor)['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("take", container);
        if ((($a = container.$parent()['$=='](actor)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($breaker.$v = nil, $breaker)};};
      if (container['$locked?']()['$=='](false)) {
        return actor.$tell("" + (self.$The(container)) + " isn't locked.")
        } else {
        key = nil;
        if (container.$lock_key()['$nil?']()['$=='](false)) {
          if (container.$lock_key().$parent()['$=='](actor)) {
            key = container.$lock_key()}};
        if ((($a = key['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$tell("You don't have any way to unlock " + (self.$the(container)) + ".")
          } else {
          actor.$tell("You unlock " + (self.$the(container)) + " with " + (self.$the(key)) + ".");
          return (($a = [false]), $b = container, $b['$locked='].apply($b, $a), $a[$a.length-1]);
        };
      };}, TMP_3.$$s = self, TMP_3), $a).call($d, "unlock", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable')));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, container, thing){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (container == null) container = nil;if (thing == null) thing = nil;
    return actor.$tell("You don't have anything called '" + (thing) + ".'")}, TMP_4.$$s = self, TMP_4), $a).call($e, "unlock", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable')), (($scope.get('Query')).$$scope.get('Text')).$new());

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, container, key){var self = TMP_5.$$s || this, $a;
if (actor == null) actor = nil;if (container == null) container = nil;if (key == null) key = nil;
    if ((($a = container['$is?']("locked")) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (container.$key()['$=='](key)) {
          return actor.$perform("unlock", container)
          } else {
          return actor.$tell("You can't unlock " + (self.$the(container)) + " with " + (self.$the(key)) + ".")
        }
        } else {
        return actor.$tell("" + (self.$The(container)) + " isn't locked.")
      }}, TMP_5.$$s = self, TMP_5), $a).call($f, "unlock", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable'), "has_lock_key?"), (($scope.get('Query')).$$scope.get('Children')).$new());

    ($a = ($g = self).$respond, $a.$$p = (TMP_6 = function(actor, container, key){var self = TMP_6.$$s || this, $a;
if (actor == null) actor = nil;if (container == null) container = nil;if (key == null) key = nil;
    if ((($a = container['$is?']("locked")) !== nil && (!$a.$$is_boolean || $a == true))) {
        actor.$perform("unlock", container, key);
        if ((($a = container['$is?']("locked")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return actor.$perform("open", container)
          } else {
          return nil
        };
        } else {
        return actor.$perform("open", container)
      }}, TMP_6.$$s = self, TMP_6), $a).call($g, "open", (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable'), "has_lock_key?"), (($scope.get('Query')).$$scope.get('Children')).$new());

    ($a = ($h = self).$respond, $a.$$p = (TMP_7 = function(actor, key, container){var self = TMP_7.$$s || this;
if (actor == null) actor = nil;if (key == null) key = nil;if (container == null) container = nil;
    return actor.$perform("unlock", container, key)}, TMP_7.$$s = self, TMP_7), $a).call($h, "use", (($scope.get('Query')).$$scope.get('Children')).$new(), (($scope.get('Query')).$$scope.get('Reachable')).$new($scope.get('Lockable'), "has_lock_key?"));

    self.$xlate("unlock :container with :key", "unlock :container :key");

    self.$xlate("open :container with :key", "open :container :key");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/use"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell', '$new', '$xlate']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, tool){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (tool == null) tool = nil;
    return actor.$tell("I don't know how. (A more specific command might work.)")}, TMP_1.$$s = self, TMP_1), $a).call($b, "use", (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, thing){var self = TMP_2.$$s || this;
if (actor == null) actor = nil;if (thing == null) thing = nil;
    return actor.$tell("You don't see any '" + (thing) + "' you can use here.")}, TMP_2.$$s = self, TMP_2), $a).call($c, "use", (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Text')).$new());

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, tool, object){var self = TMP_3.$$s || this;
if (actor == null) actor = nil;if (tool == null) tool = nil;if (object == null) object = nil;
    return actor.$tell("You're not carrying the " + (tool) + ".")}, TMP_3.$$s = self, TMP_3), $a).call($d, "use", (($scope.get('Query')).$$scope.get('Reachable')).$new(), (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, tool, object){var self = TMP_4.$$s || this;
if (actor == null) actor = nil;if (tool == null) tool = nil;if (object == null) object = nil;
    return actor.$tell("You don't see any '" + (object) + "' here.")}, TMP_4.$$s = self, TMP_4), $a).call($e, "use", (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Children')).$new(), (((($scope.get('Gamefic')).$$scope.get('Query'))).$$scope.get('Text')).$new());

    ($a = ($f = self).$respond, $a.$$p = (TMP_5 = function(actor, tool, object){var self = TMP_5.$$s || this;
if (actor == null) actor = nil;if (tool == null) tool = nil;if (object == null) object = nil;
    return actor.$tell("You don't have anything called '" + (tool) + ".'")}, TMP_5.$$s = self, TMP_5), $a).call($f, "use", (($scope.get('Query')).$$scope.get('Text')).$new(), (($scope.get('Query')).$$scope.get('Reachable')).$new());

    ($a = ($g = self).$respond, $a.$$p = (TMP_6 = function(actor, tool, object){var self = TMP_6.$$s || this;
if (actor == null) actor = nil;if (tool == null) tool = nil;if (object == null) object = nil;
    return actor.$tell("I don't know how. (A more specific command might work.)")}, TMP_6.$$s = self, TMP_6), $a).call($g, "use", (($scope.get('Query')).$$scope.get('Children')).$new(), (($scope.get('Query')).$$scope.get('Reachable')).$new());

    self.$xlate("use :tool on :object", "use :tool :object");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions/wait"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$respond', '$tell']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;
    return actor.$tell("Time passes.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "wait")
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/actions"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/actions/close");

    self.$require("standard/actions/drop");

    self.$require("standard/actions/enter");

    self.$require("standard/actions/give");

    self.$require("standard/actions/go");

    self.$require("standard/actions/insert");

    self.$require("standard/actions/inventory");

    self.$require("standard/actions/leave");

    self.$require("standard/actions/lock");

    self.$require("standard/actions/look-under");

    self.$require("standard/actions/look");

    self.$require("standard/actions/nil");

    self.$require("standard/actions/open");

    self.$require("standard/actions/place");

    self.$require("standard/actions/quit");

    self.$require("standard/actions/read");

    self.$require("standard/actions/search");

    self.$require("standard/actions/show");

    self.$require("standard/actions/take");

    self.$require("standard/actions/talk");

    self.$require("standard/actions/unlock");

    self.$require("standard/actions/use");

    self.$require("standard/actions/wait");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/rules/has-enough-light"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$assert_action', '$!', '$nil?', '$is?', '$room', '$==', '$tell']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = self).$assert_action, $a.$$p = (TMP_1 = function(actor, action){var self = TMP_1.$$s || this, $a, $b;
if (actor == null) actor = nil;if (action == null) action = nil;
    if ((($a = ((($b = actor['$nil?']()['$!']()) !== false && $b !== nil) ? $b : actor.$room()['$is?']("lighted"))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if (action['$==']("go")) {
        return true
        } else {
        actor.$tell("It's too dark in here.");
        return false;
      }}, TMP_1.$$s = self, TMP_1), $a).call($b, "has_enough_light")
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/rules"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/rules/has-enough-light")
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard/pathfinder"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$==', '$nil?', '$length', '$embark', '$private', '$each', '$last', '$that_are', '$children', '$clone', '$!', '$include?', '$destination', '$push', '$shift', '$delete_if']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Pathfinder(){};
      var self = $Pathfinder = $klass($base, $super, 'Pathfinder', $Pathfinder);

      var def = self.$$proto, $scope = self.$$scope;

      def.origin = def.destination = def.path = def.paths = nil;
      self.$attr_reader("origin", "destination", "path");

      def.$initialize = function(origin, destination) {
        var $a, $b, $c, self = this;

        self.origin = origin;
        self.destination = destination;
        self.path = nil;
        self.paths = [[self.origin]];
        self.visited = [];
        if (self.origin['$=='](self.destination)) {
          return self.path = []
          } else {
          while ((($b = ($c = self.path['$nil?'](), $c !== false && $c !== nil ?$rb_gt(self.paths.$length(), 0) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$embark()}
        };
      };

      self.$private();

      return (def.$embark = function() {
        var $a, $b, TMP_1, $c, TMP_3, self = this, new_paths = nil;

        new_paths = [];
        ($a = ($b = self.paths).$each, $a.$$p = (TMP_1 = function(path){var self = TMP_1.$$s || this, $a, $b, TMP_2, last = nil, portals = nil;
if (path == null) path = nil;
        last = path.$last();
          portals = last.$children().$that_are($scope.get('Portal'));
          ($a = ($b = portals).$each, $a.$$p = (TMP_2 = function(portal){var self = TMP_2.$$s || this, $a, new_path = nil;
            if (self.visited == null) self.visited = nil;
            if (self.destination == null) self.destination = nil;
            if (self.path == null) self.path = nil;
if (portal == null) portal = nil;
          new_path = path.$clone();
            if ((($a = self.visited['$include?'](portal.$destination())['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              new_path.$push(portal.$destination());
              self.visited.$push(portal.$destination());
              if (portal.$destination()['$=='](self.destination)) {
                self.path = new_path;
                self.path.$shift();
                return ($breaker.$v = nil, $breaker);};
              return new_paths.$push(new_path);
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2), $a).call($b);
          return path.$push(nil);}, TMP_1.$$s = self, TMP_1), $a).call($b);
        self.paths = $rb_plus(self.paths, new_paths);
        return ($a = ($c = self.paths).$delete_if, $a.$$p = (TMP_3 = function(path){var self = TMP_3.$$s || this;
if (path == null) path = nil;
        return path.$last()['$nil?']()}, TMP_3.$$s = self, TMP_3), $a).call($c);
      }, nil) && 'embark';
    })($scope.get('Gamefic'), null)
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["standard"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope;

    self.$require("standard/use");

    self.$require("standard/modules");

    self.$require("standard/entities");

    self.$require("standard/queries");

    self.$require("standard/actions");

    self.$require("standard/rules");

    self.$require("standard/pathfinder");
  })(self);
};

/* Generated by Opal 0.8.1 */
Opal.modules["main"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$make', '$respond', '$tell', '$new', '$connect', '$empty?', '$children', '$a', '$[]', '$xlate', '$!', '$==', '$parent', '$proceed', '$dark=', '$session', '$conclude', '$assert_action', '$dark?', '$room', '$[]=', '$introduction', '$parent=', '$perform', '$conclusion']);
  self.$require("gamefic");
  return (function($base) {
    var self = $module($base, 'Gamefic');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, $f, TMP_5, $g, TMP_6, $h, TMP_7, $i, TMP_8, foyer = nil, frontDoor = nil, cloakroom = nil, hook = nil, cloak = nil, bar = nil, message = nil;

    self.$require("standard");

    foyer = self.$make($scope.get('Room'), $hash2(["name", "description"], {"name": "Foyer of the Opera House", "description": "You are standing in a spacious hall, splendidly decorated in red and gold, with glittering chandeliers overhead. The entrance from the street is to the north, and there are doorways south and west."}));

    frontDoor = self.$make($scope.get('Portal'), $hash2(["name", "description", "parent", "proper_named"], {"name": "north", "description": "The door to the street.", "parent": foyer, "proper_named": true}));

    ($a = ($b = self).$respond, $a.$$p = (TMP_1 = function(actor, dest){var self = TMP_1.$$s || this;
if (actor == null) actor = nil;if (dest == null) dest = nil;
    return actor.$tell("You've only just arrived, and besides, the weather outside seems to be getting worse.")}, TMP_1.$$s = self, TMP_1), $a).call($b, "go", (($scope.get('Query')).$$scope.get('Siblings')).$new(frontDoor));

    cloakroom = self.$make($scope.get('Room'), $hash2(["name", "description"], {"name": "Cloakroom", "description": "The walls of this small room were clearly once lined with hooks, though now only one remains. The exit is a door to the east."}));

    foyer.$connect(cloakroom, "west");

    hook = self.$make($scope.get('Supporter'), $hash2(["name", "description", "parent", "synonyms"], {"name": "a small brass hook", "description": "It's just a brass hook.", "parent": cloakroom, "synonyms": "peg"}));

    ($a = ($c = self).$respond, $a.$$p = (TMP_2 = function(actor, hook){var self = TMP_2.$$s || this, $a;
if (actor == null) actor = nil;if (hook == null) hook = nil;
    if ((($a = hook.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("It's just a brass hook, screwed to the wall.")
        } else {
        return actor.$tell("It's just a brass hook, with " + (self.$a(hook.$children()['$[]'](0))) + " hanging on it, screwed to the wall.")
      }}, TMP_2.$$s = self, TMP_2), $a).call($c, "look", (($scope.get('Query')).$$scope.get('Family')).$new(hook));

    self.$xlate("hang :item on :hook", "place :item :hook");

    cloak = self.$make($scope.get('Item'), $hash2(["name", "description", "synonyms"], {"name": "a velvet cloak", "description": "A handsome cloak, of velvet trimmed with satin, and slightly splattered with raindrops. Its blackness is so deep that it almost seems to suck light from the room.", "synonyms": "dark black satin"}));

    ($a = ($d = self).$respond, $a.$$p = (TMP_3 = function(actor, message){var self = TMP_3.$$s || this, $a;
if (actor == null) actor = nil;if (message == null) message = nil;
    if ((($a = actor.$parent()['$=='](cloakroom)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return actor.$tell("This isn't the best place to leave a smart cloak lying around.")
        } else {
        return actor.$proceed()
      }}, TMP_3.$$s = self, TMP_3), $a).call($d, "drop", (($scope.get('Query')).$$scope.get('Children')).$new(cloak));

    bar = self.$make($scope.get('Room'), $hash2(["name", "description"], {"name": "Foyer Bar", "description": "The bar, much rougher than you'd have guessed after the opulence of the foyer to the north, is completely empty. There seems to be some sort of message scrawled in the sawdust on the floor."}));

    (($a = [true]), $e = bar, $e['$dark='].apply($e, $a), $a[$a.length-1]);

    foyer.$connect(bar, "south");

    message = self.$make($scope.get('Scenery'), $hash2(["name", "description", "parent", "synonyms"], {"name": "message", "description": "", "parent": bar, "synonyms": "scrawl scrawled sawdust dust"}));

    ($a = ($e = self).$respond, $a.$$p = (TMP_4 = function(actor, message){var self = TMP_4.$$s || this, $a;
if (actor == null) actor = nil;if (message == null) message = nil;
    if ((($a = actor.$session()['$[]']("disturbed")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$conclude(actor, "you_have_lost")
        } else {
        return self.$conclude(actor, "you_have_won")
      }}, TMP_4.$$s = self, TMP_4), $a).call($e, "look", (($scope.get('Query')).$$scope.get('Siblings')).$new(message));

    self.$xlate("read :message", "look :message");

    ($a = ($f = self).$assert_action, $a.$$p = (TMP_5 = function(actor, action){var self = TMP_5.$$s || this, $a, $b;
if (actor == null) actor = nil;if (action == null) action = nil;
    if (cloak.$parent()['$=='](actor)) {
        (($a = [true]), $b = bar, $b['$dark='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [false]), $b = bar, $b['$dark='].apply($b, $a), $a[$a.length-1])
      };
      if ((($a = actor.$room()['$dark?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (action['$==']("go")) {
          return true
        } else if (action['$==']("look")) {
          actor.$tell("It's too dark in here.");
          return false;
          } else {
          actor.$tell("Uh oh, you're wandering around in the dark!");
          actor.$session()['$[]=']("disturbed", true);
          return false;
        }
        } else {
        return true
      };}, TMP_5.$$s = self, TMP_5), $a).call($f, "has_enough_light");

    ($a = ($g = self).$introduction, $a.$$p = (TMP_6 = function(player){var self = TMP_6.$$s || this, $a, $b;
if (player == null) player = nil;
    player.$tell("Hurrying through the rainswept November night, you're glad to see the bright lights of the Opera House. It's surprising that there aren't more people about but, hey, what do you expect in a cheap demo game...?");
      (($a = [foyer]), $b = player, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      (($a = [player]), $b = cloak, $b['$parent='].apply($b, $a), $a[$a.length-1]);
      player.$session()['$[]=']("disturbed", false);
      return player.$perform("look");}, TMP_6.$$s = self, TMP_6), $a).call($g);

    ($a = ($h = self).$conclusion, $a.$$p = (TMP_7 = function(actor){var self = TMP_7.$$s || this;
if (actor == null) actor = nil;
    actor.$tell("The message, neatly marked in the sawdust, reads...");
      return actor.$tell("*** You have won ***");}, TMP_7.$$s = self, TMP_7), $a).call($h, "you_have_won");

    ($a = ($i = self).$conclusion, $a.$$p = (TMP_8 = function(actor){var self = TMP_8.$$s || this;
if (actor == null) actor = nil;
    actor.$tell("The message has been carelessly trampled, making it difficult to read. You can just distinguish the words...");
      return actor.$tell("*** You have lost ***");}, TMP_8.$$s = self, TMP_8), $a).call($i, "you_have_lost");
  })(self);
};

/* Generated by Opal 0.8.1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$nil?', '$instance_eval', '$instance_exec', '$to_proc', '$new', '$static_plot', '$respond_to?', '$send', '$raise']);
  self.$require("gamefic");
  self.$require("gamefic/query/matches");
  self.$require("gamefic/grammar/verb_set");
  (function($base, $super) {
    function $WebPlot(){};
    var self = $WebPlot = $klass($base, $super, 'WebPlot', $WebPlot);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (def.$stage = TMP_1 = function(args) {
      var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_1.$$p = null;
      if ((($a = block['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self).$instance_eval.apply($a, [].concat(args))
        } else {
        return ($b = ($c = self).$instance_exec, $b.$$p = block.$to_proc(), $b).apply($c, [].concat(args))
      };
    }, nil) && 'stage'
  })(self, (($scope.get('Gamefic')).$$scope.get('Plot')));
  (function($base, $super) {
    function $WebUser(){};
    var self = $WebUser = $klass($base, $super, 'WebUser', $WebUser);

    var def = self.$$proto, $scope = self.$$scope;

    def.$save = function(filename, data) {
      var self = this;

      Gamefic.Engine.save(filename, data);
    };

    return (def.$restore = function(filename) {
      var self = this, data = nil;

      data = Gamefic.Engine.restore(filename);;
      return data;
    }, nil) && 'restore';
  })(self, (($scope.get('Gamefic')).$$scope.get('User')));
  (function($base) {
    var self = $module($base, 'GameficOpal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$static_plot', function() {
      var $a, $b, self = this;

      return ((($a = (($b = Opal.cvars['@@static_plot']) == null ? nil : $b)) !== false && $a !== nil) ? $a : (Opal.cvars['@@static_plot'] = $scope.get('WebPlot').$new()));
    });

    Opal.defs(self, '$static_player', function() {
      var $a, $b, self = this;

      return ((($a = (($b = Opal.cvars['@@static_player']) == null ? nil : $b)) !== false && $a !== nil) ? $a : (Opal.cvars['@@static_player'] = $scope.get('WebUser').$new((($scope.get('Gamefic')).$$scope.get('GameficOpal')).$static_plot())));
    });
  })(self);
  Opal.Object.$$proto.$method_missing = TMP_2 = function(symbol, args) {
    var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

    args = $slice.call(arguments, 1);
    TMP_2.$$p = null;
    if ((($a = $scope.get('GameficOpal').$static_plot()['$respond_to?'](symbol)) !== nil && (!$a.$$is_boolean || $a == true))) {
      return ($a = ($b = $scope.get('GameficOpal').$static_plot()).$send, $a.$$p = block.$to_proc(), $a).apply($b, [symbol].concat(args))
      } else {
      return self.$raise($scope.get('NameError').$new("Unrecognized method " + (symbol)))
    };
  };
  return self.$require("main");
})(Opal);
